/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CFBSharp.Client.SwaggerDateConverter;

namespace CFBSharp.Model
{
    /// <summary>
    /// TeamFPIRatingEfficiencies
    /// </summary>
    [DataContract]
    public partial class TeamFPIRatingEfficiencies :  IEquatable<TeamFPIRatingEfficiencies>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamFPIRatingEfficiencies" /> class.
        /// </summary>
        /// <param name="overall">overall.</param>
        /// <param name="offense">offense.</param>
        /// <param name="defense">defense.</param>
        /// <param name="specialTeams">specialTeams.</param>
        public TeamFPIRatingEfficiencies(decimal? overall = default(decimal?), decimal? offense = default(decimal?), decimal? defense = default(decimal?), decimal? specialTeams = default(decimal?))
        {
            this.Overall = overall;
            this.Offense = offense;
            this.Defense = defense;
            this.SpecialTeams = specialTeams;
        }
        
        /// <summary>
        /// Gets or Sets Overall
        /// </summary>
        [DataMember(Name="overall", EmitDefaultValue=false)]
        public decimal? Overall { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [DataMember(Name="offense", EmitDefaultValue=false)]
        public decimal? Offense { get; set; }

        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [DataMember(Name="defense", EmitDefaultValue=false)]
        public decimal? Defense { get; set; }

        /// <summary>
        /// Gets or Sets SpecialTeams
        /// </summary>
        [DataMember(Name="specialTeams", EmitDefaultValue=false)]
        public decimal? SpecialTeams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamFPIRatingEfficiencies {\n");
            sb.Append("  Overall: ").Append(Overall).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  SpecialTeams: ").Append(SpecialTeams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamFPIRatingEfficiencies);
        }

        /// <summary>
        /// Returns true if TeamFPIRatingEfficiencies instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamFPIRatingEfficiencies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamFPIRatingEfficiencies input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Overall == input.Overall ||
                    (this.Overall != null &&
                    this.Overall.Equals(input.Overall))
                ) && 
                (
                    this.Offense == input.Offense ||
                    (this.Offense != null &&
                    this.Offense.Equals(input.Offense))
                ) && 
                (
                    this.Defense == input.Defense ||
                    (this.Defense != null &&
                    this.Defense.Equals(input.Defense))
                ) && 
                (
                    this.SpecialTeams == input.SpecialTeams ||
                    (this.SpecialTeams != null &&
                    this.SpecialTeams.Equals(input.SpecialTeams))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Overall != null)
                    hashCode = hashCode * 59 + this.Overall.GetHashCode();
                if (this.Offense != null)
                    hashCode = hashCode * 59 + this.Offense.GetHashCode();
                if (this.Defense != null)
                    hashCode = hashCode * 59 + this.Defense.GetHashCode();
                if (this.SpecialTeams != null)
                    hashCode = hashCode * 59 + this.SpecialTeams.GetHashCode();
                return hashCode;
            }
        }
    }

}
