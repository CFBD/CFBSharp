/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.4.4
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CFBSharp.Client.SwaggerDateConverter;

namespace CFBSharp.Model
{
    /// <summary>
    /// ScoreboardGame
    /// </summary>
    [DataContract]
    public partial class ScoreboardGame :  IEquatable<ScoreboardGame>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardGame" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="startTimeTBD">startTimeTBD.</param>
        /// <param name="tv">tv.</param>
        /// <param name="neutralSite">neutralSite.</param>
        /// <param name="conferenceGame">conferenceGame.</param>
        /// <param name="status">status.</param>
        /// <param name="period">period.</param>
        /// <param name="clock">clock.</param>
        /// <param name="venue">venue.</param>
        /// <param name="homeTeam">homeTeam.</param>
        /// <param name="awayTeam">awayTeam.</param>
        /// <param name="weather">weather.</param>
        /// <param name="betting">betting.</param>
        public ScoreboardGame(int? id = default(int?), string startDate = default(string), bool? startTimeTBD = default(bool?), string tv = default(string), bool? neutralSite = default(bool?), bool? conferenceGame = default(bool?), string status = default(string), int? period = default(int?), string clock = default(string), Object venue = default(Object), Object homeTeam = default(Object), Object awayTeam = default(Object), Object weather = default(Object), Object betting = default(Object))
        {
            this.Id = id;
            this.StartDate = startDate;
            this.StartTimeTBD = startTimeTBD;
            this.Tv = tv;
            this.NeutralSite = neutralSite;
            this.ConferenceGame = conferenceGame;
            this.Status = status;
            this.Period = period;
            this.Clock = clock;
            this.Venue = venue;
            this.HomeTeam = homeTeam;
            this.AwayTeam = awayTeam;
            this.Weather = weather;
            this.Betting = betting;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartTimeTBD
        /// </summary>
        [DataMember(Name="startTimeTBD", EmitDefaultValue=false)]
        public bool? StartTimeTBD { get; set; }

        /// <summary>
        /// Gets or Sets Tv
        /// </summary>
        [DataMember(Name="tv", EmitDefaultValue=false)]
        public string Tv { get; set; }

        /// <summary>
        /// Gets or Sets NeutralSite
        /// </summary>
        [DataMember(Name="neutralSite", EmitDefaultValue=false)]
        public bool? NeutralSite { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceGame
        /// </summary>
        [DataMember(Name="conferenceGame", EmitDefaultValue=false)]
        public bool? ConferenceGame { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public int? Period { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name="clock", EmitDefaultValue=false)]
        public string Clock { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [DataMember(Name="venue", EmitDefaultValue=false)]
        public Object Venue { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name="homeTeam", EmitDefaultValue=false)]
        public Object HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name="awayTeam", EmitDefaultValue=false)]
        public Object AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets Weather
        /// </summary>
        [DataMember(Name="weather", EmitDefaultValue=false)]
        public Object Weather { get; set; }

        /// <summary>
        /// Gets or Sets Betting
        /// </summary>
        [DataMember(Name="betting", EmitDefaultValue=false)]
        public Object Betting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScoreboardGame {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTimeTBD: ").Append(StartTimeTBD).Append("\n");
            sb.Append("  Tv: ").Append(Tv).Append("\n");
            sb.Append("  NeutralSite: ").Append(NeutralSite).Append("\n");
            sb.Append("  ConferenceGame: ").Append(ConferenceGame).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  Weather: ").Append(Weather).Append("\n");
            sb.Append("  Betting: ").Append(Betting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScoreboardGame);
        }

        /// <summary>
        /// Returns true if ScoreboardGame instances are equal
        /// </summary>
        /// <param name="input">Instance of ScoreboardGame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScoreboardGame input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StartTimeTBD == input.StartTimeTBD ||
                    (this.StartTimeTBD != null &&
                    this.StartTimeTBD.Equals(input.StartTimeTBD))
                ) && 
                (
                    this.Tv == input.Tv ||
                    (this.Tv != null &&
                    this.Tv.Equals(input.Tv))
                ) && 
                (
                    this.NeutralSite == input.NeutralSite ||
                    (this.NeutralSite != null &&
                    this.NeutralSite.Equals(input.NeutralSite))
                ) && 
                (
                    this.ConferenceGame == input.ConferenceGame ||
                    (this.ConferenceGame != null &&
                    this.ConferenceGame.Equals(input.ConferenceGame))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.Clock == input.Clock ||
                    (this.Clock != null &&
                    this.Clock.Equals(input.Clock))
                ) && 
                (
                    this.Venue == input.Venue ||
                    (this.Venue != null &&
                    this.Venue.Equals(input.Venue))
                ) && 
                (
                    this.HomeTeam == input.HomeTeam ||
                    (this.HomeTeam != null &&
                    this.HomeTeam.Equals(input.HomeTeam))
                ) && 
                (
                    this.AwayTeam == input.AwayTeam ||
                    (this.AwayTeam != null &&
                    this.AwayTeam.Equals(input.AwayTeam))
                ) && 
                (
                    this.Weather == input.Weather ||
                    (this.Weather != null &&
                    this.Weather.Equals(input.Weather))
                ) && 
                (
                    this.Betting == input.Betting ||
                    (this.Betting != null &&
                    this.Betting.Equals(input.Betting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartTimeTBD != null)
                    hashCode = hashCode * 59 + this.StartTimeTBD.GetHashCode();
                if (this.Tv != null)
                    hashCode = hashCode * 59 + this.Tv.GetHashCode();
                if (this.NeutralSite != null)
                    hashCode = hashCode * 59 + this.NeutralSite.GetHashCode();
                if (this.ConferenceGame != null)
                    hashCode = hashCode * 59 + this.ConferenceGame.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Clock != null)
                    hashCode = hashCode * 59 + this.Clock.GetHashCode();
                if (this.Venue != null)
                    hashCode = hashCode * 59 + this.Venue.GetHashCode();
                if (this.HomeTeam != null)
                    hashCode = hashCode * 59 + this.HomeTeam.GetHashCode();
                if (this.AwayTeam != null)
                    hashCode = hashCode * 59 + this.AwayTeam.GetHashCode();
                if (this.Weather != null)
                    hashCode = hashCode * 59 + this.Weather.GetHashCode();
                if (this.Betting != null)
                    hashCode = hashCode * 59 + this.Betting.GetHashCode();
                return hashCode;
            }
        }
    }

}
