/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.4.4
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CFBSharp.Client.SwaggerDateConverter;

namespace CFBSharp.Model
{
    /// <summary>
    /// PlayerGameTeams
    /// </summary>
    [DataContract]
    public partial class PlayerGameTeams :  IEquatable<PlayerGameTeams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerGameTeams" /> class.
        /// </summary>
        /// <param name="school">school.</param>
        /// <param name="homeAway">homeAway.</param>
        /// <param name="points">points.</param>
        /// <param name="categories">categories.</param>
        public PlayerGameTeams(PlayerGameSchool school = default(PlayerGameSchool), bool? homeAway = default(bool?), int? points = default(int?), List<PlayerGameCategories> categories = default(List<PlayerGameCategories>))
        {
            this.School = school;
            this.HomeAway = homeAway;
            this.Points = points;
            this.Categories = categories;
        }
        
        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name="school", EmitDefaultValue=false)]
        public PlayerGameSchool School { get; set; }

        /// <summary>
        /// Gets or Sets HomeAway
        /// </summary>
        [DataMember(Name="homeAway", EmitDefaultValue=false)]
        public bool? HomeAway { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public int? Points { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<PlayerGameCategories> Categories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerGameTeams {\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  HomeAway: ").Append(HomeAway).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerGameTeams);
        }

        /// <summary>
        /// Returns true if PlayerGameTeams instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerGameTeams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerGameTeams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.School == input.School ||
                    (this.School != null &&
                    this.School.Equals(input.School))
                ) && 
                (
                    this.HomeAway == input.HomeAway ||
                    (this.HomeAway != null &&
                    this.HomeAway.Equals(input.HomeAway))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.School != null)
                    hashCode = hashCode * 59 + this.School.GetHashCode();
                if (this.HomeAway != null)
                    hashCode = hashCode * 59 + this.HomeAway.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                return hashCode;
            }
        }
    }

}
