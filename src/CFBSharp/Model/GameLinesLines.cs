/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.4.6
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CFBSharp.Client.SwaggerDateConverter;

namespace CFBSharp.Model
{
    /// <summary>
    /// GameLinesLines
    /// </summary>
    [DataContract]
    public partial class GameLinesLines :  IEquatable<GameLinesLines>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameLinesLines" /> class.
        /// </summary>
        /// <param name="provider">provider.</param>
        /// <param name="spread">spread.</param>
        /// <param name="formattedSpread">formattedSpread.</param>
        /// <param name="spreadOpen">spreadOpen.</param>
        /// <param name="overUnder">overUnder.</param>
        /// <param name="overUnderOpen">overUnderOpen.</param>
        /// <param name="homeMoneyline">homeMoneyline.</param>
        /// <param name="awayMoneyline">awayMoneyline.</param>
        public GameLinesLines(string provider = default(string), decimal? spread = default(decimal?), string formattedSpread = default(string), decimal? spreadOpen = default(decimal?), decimal? overUnder = default(decimal?), decimal? overUnderOpen = default(decimal?), decimal? homeMoneyline = default(decimal?), decimal? awayMoneyline = default(decimal?))
        {
            this.Provider = provider;
            this.Spread = spread;
            this.FormattedSpread = formattedSpread;
            this.SpreadOpen = spreadOpen;
            this.OverUnder = overUnder;
            this.OverUnderOpen = overUnderOpen;
            this.HomeMoneyline = homeMoneyline;
            this.AwayMoneyline = awayMoneyline;
        }
        
        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name="spread", EmitDefaultValue=false)]
        public decimal? Spread { get; set; }

        /// <summary>
        /// Gets or Sets FormattedSpread
        /// </summary>
        [DataMember(Name="formattedSpread", EmitDefaultValue=false)]
        public string FormattedSpread { get; set; }

        /// <summary>
        /// Gets or Sets SpreadOpen
        /// </summary>
        [DataMember(Name="spreadOpen", EmitDefaultValue=false)]
        public decimal? SpreadOpen { get; set; }

        /// <summary>
        /// Gets or Sets OverUnder
        /// </summary>
        [DataMember(Name="overUnder", EmitDefaultValue=false)]
        public decimal? OverUnder { get; set; }

        /// <summary>
        /// Gets or Sets OverUnderOpen
        /// </summary>
        [DataMember(Name="overUnderOpen", EmitDefaultValue=false)]
        public decimal? OverUnderOpen { get; set; }

        /// <summary>
        /// Gets or Sets HomeMoneyline
        /// </summary>
        [DataMember(Name="homeMoneyline", EmitDefaultValue=false)]
        public decimal? HomeMoneyline { get; set; }

        /// <summary>
        /// Gets or Sets AwayMoneyline
        /// </summary>
        [DataMember(Name="awayMoneyline", EmitDefaultValue=false)]
        public decimal? AwayMoneyline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GameLinesLines {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  FormattedSpread: ").Append(FormattedSpread).Append("\n");
            sb.Append("  SpreadOpen: ").Append(SpreadOpen).Append("\n");
            sb.Append("  OverUnder: ").Append(OverUnder).Append("\n");
            sb.Append("  OverUnderOpen: ").Append(OverUnderOpen).Append("\n");
            sb.Append("  HomeMoneyline: ").Append(HomeMoneyline).Append("\n");
            sb.Append("  AwayMoneyline: ").Append(AwayMoneyline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GameLinesLines);
        }

        /// <summary>
        /// Returns true if GameLinesLines instances are equal
        /// </summary>
        /// <param name="input">Instance of GameLinesLines to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GameLinesLines input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Spread == input.Spread ||
                    (this.Spread != null &&
                    this.Spread.Equals(input.Spread))
                ) && 
                (
                    this.FormattedSpread == input.FormattedSpread ||
                    (this.FormattedSpread != null &&
                    this.FormattedSpread.Equals(input.FormattedSpread))
                ) && 
                (
                    this.SpreadOpen == input.SpreadOpen ||
                    (this.SpreadOpen != null &&
                    this.SpreadOpen.Equals(input.SpreadOpen))
                ) && 
                (
                    this.OverUnder == input.OverUnder ||
                    (this.OverUnder != null &&
                    this.OverUnder.Equals(input.OverUnder))
                ) && 
                (
                    this.OverUnderOpen == input.OverUnderOpen ||
                    (this.OverUnderOpen != null &&
                    this.OverUnderOpen.Equals(input.OverUnderOpen))
                ) && 
                (
                    this.HomeMoneyline == input.HomeMoneyline ||
                    (this.HomeMoneyline != null &&
                    this.HomeMoneyline.Equals(input.HomeMoneyline))
                ) && 
                (
                    this.AwayMoneyline == input.AwayMoneyline ||
                    (this.AwayMoneyline != null &&
                    this.AwayMoneyline.Equals(input.AwayMoneyline))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Spread != null)
                    hashCode = hashCode * 59 + this.Spread.GetHashCode();
                if (this.FormattedSpread != null)
                    hashCode = hashCode * 59 + this.FormattedSpread.GetHashCode();
                if (this.SpreadOpen != null)
                    hashCode = hashCode * 59 + this.SpreadOpen.GetHashCode();
                if (this.OverUnder != null)
                    hashCode = hashCode * 59 + this.OverUnder.GetHashCode();
                if (this.OverUnderOpen != null)
                    hashCode = hashCode * 59 + this.OverUnderOpen.GetHashCode();
                if (this.HomeMoneyline != null)
                    hashCode = hashCode * 59 + this.HomeMoneyline.GetHashCode();
                if (this.AwayMoneyline != null)
                    hashCode = hashCode * 59 + this.AwayMoneyline.GetHashCode();
                return hashCode;
            }
        }
    }

}
