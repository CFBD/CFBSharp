/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.5.2
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CFBSharp.Client.SwaggerDateConverter;

namespace CFBSharp.Model
{
    /// <summary>
    /// TeamFPIRatingResumeRanks
    /// </summary>
    [DataContract]
    public partial class TeamFPIRatingResumeRanks :  IEquatable<TeamFPIRatingResumeRanks>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamFPIRatingResumeRanks" /> class.
        /// </summary>
        /// <param name="strengthOfRecord">strengthOfRecord.</param>
        /// <param name="fpi">fpi.</param>
        /// <param name="averageWinProbability">averageWinProbability.</param>
        /// <param name="strengthOfSchedule">strengthOfSchedule.</param>
        /// <param name="remainingStrengthOfSchedule">remainingStrengthOfSchedule.</param>
        /// <param name="gameControl">gameControl.</param>
        public TeamFPIRatingResumeRanks(int? strengthOfRecord = default(int?), int? fpi = default(int?), int? averageWinProbability = default(int?), int? strengthOfSchedule = default(int?), int? remainingStrengthOfSchedule = default(int?), int? gameControl = default(int?))
        {
            this.StrengthOfRecord = strengthOfRecord;
            this.Fpi = fpi;
            this.AverageWinProbability = averageWinProbability;
            this.StrengthOfSchedule = strengthOfSchedule;
            this.RemainingStrengthOfSchedule = remainingStrengthOfSchedule;
            this.GameControl = gameControl;
        }
        
        /// <summary>
        /// Gets or Sets StrengthOfRecord
        /// </summary>
        [DataMember(Name="strengthOfRecord", EmitDefaultValue=false)]
        public int? StrengthOfRecord { get; set; }

        /// <summary>
        /// Gets or Sets Fpi
        /// </summary>
        [DataMember(Name="fpi", EmitDefaultValue=false)]
        public int? Fpi { get; set; }

        /// <summary>
        /// Gets or Sets AverageWinProbability
        /// </summary>
        [DataMember(Name="averageWinProbability", EmitDefaultValue=false)]
        public int? AverageWinProbability { get; set; }

        /// <summary>
        /// Gets or Sets StrengthOfSchedule
        /// </summary>
        [DataMember(Name="strengthOfSchedule", EmitDefaultValue=false)]
        public int? StrengthOfSchedule { get; set; }

        /// <summary>
        /// Gets or Sets RemainingStrengthOfSchedule
        /// </summary>
        [DataMember(Name="remainingStrengthOfSchedule", EmitDefaultValue=false)]
        public int? RemainingStrengthOfSchedule { get; set; }

        /// <summary>
        /// Gets or Sets GameControl
        /// </summary>
        [DataMember(Name="gameControl", EmitDefaultValue=false)]
        public int? GameControl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamFPIRatingResumeRanks {\n");
            sb.Append("  StrengthOfRecord: ").Append(StrengthOfRecord).Append("\n");
            sb.Append("  Fpi: ").Append(Fpi).Append("\n");
            sb.Append("  AverageWinProbability: ").Append(AverageWinProbability).Append("\n");
            sb.Append("  StrengthOfSchedule: ").Append(StrengthOfSchedule).Append("\n");
            sb.Append("  RemainingStrengthOfSchedule: ").Append(RemainingStrengthOfSchedule).Append("\n");
            sb.Append("  GameControl: ").Append(GameControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamFPIRatingResumeRanks);
        }

        /// <summary>
        /// Returns true if TeamFPIRatingResumeRanks instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamFPIRatingResumeRanks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamFPIRatingResumeRanks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StrengthOfRecord == input.StrengthOfRecord ||
                    (this.StrengthOfRecord != null &&
                    this.StrengthOfRecord.Equals(input.StrengthOfRecord))
                ) && 
                (
                    this.Fpi == input.Fpi ||
                    (this.Fpi != null &&
                    this.Fpi.Equals(input.Fpi))
                ) && 
                (
                    this.AverageWinProbability == input.AverageWinProbability ||
                    (this.AverageWinProbability != null &&
                    this.AverageWinProbability.Equals(input.AverageWinProbability))
                ) && 
                (
                    this.StrengthOfSchedule == input.StrengthOfSchedule ||
                    (this.StrengthOfSchedule != null &&
                    this.StrengthOfSchedule.Equals(input.StrengthOfSchedule))
                ) && 
                (
                    this.RemainingStrengthOfSchedule == input.RemainingStrengthOfSchedule ||
                    (this.RemainingStrengthOfSchedule != null &&
                    this.RemainingStrengthOfSchedule.Equals(input.RemainingStrengthOfSchedule))
                ) && 
                (
                    this.GameControl == input.GameControl ||
                    (this.GameControl != null &&
                    this.GameControl.Equals(input.GameControl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StrengthOfRecord != null)
                    hashCode = hashCode * 59 + this.StrengthOfRecord.GetHashCode();
                if (this.Fpi != null)
                    hashCode = hashCode * 59 + this.Fpi.GetHashCode();
                if (this.AverageWinProbability != null)
                    hashCode = hashCode * 59 + this.AverageWinProbability.GetHashCode();
                if (this.StrengthOfSchedule != null)
                    hashCode = hashCode * 59 + this.StrengthOfSchedule.GetHashCode();
                if (this.RemainingStrengthOfSchedule != null)
                    hashCode = hashCode * 59 + this.RemainingStrengthOfSchedule.GetHashCode();
                if (this.GameControl != null)
                    hashCode = hashCode * 59 + this.GameControl.GetHashCode();
                return hashCode;
            }
        }
    }

}
