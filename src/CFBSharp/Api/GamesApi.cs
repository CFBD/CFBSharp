/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.4.7
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CFBSharp.Client;
using CFBSharp.Model;

namespace CFBSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGamesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced box scores
        /// </summary>
        /// <remarks>
        /// Get advanced box score data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id parameters</param>
        /// <returns>BoxScore</returns>
        BoxScore GetAdvancedBoxScore (int? gameId);

        /// <summary>
        /// Advanced box scores
        /// </summary>
        /// <remarks>
        /// Get advanced box score data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id parameters</param>
        /// <returns>ApiResponse of BoxScore</returns>
        ApiResponse<BoxScore> GetAdvancedBoxScoreWithHttpInfo (int? gameId);
        /// <summary>
        /// Season calendar
        /// </summary>
        /// <remarks>
        /// Get calendar of weeks by season
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <returns>ICollection&lt;Week&gt;</returns>
        ICollection<Week> GetCalendar (int? year);

        /// <summary>
        /// Season calendar
        /// </summary>
        /// <remarks>
        /// Get calendar of weeks by season
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <returns>ApiResponse of ICollection&lt;Week&gt;</returns>
        ApiResponse<ICollection<Week>> GetCalendarWithHttpInfo (int? year);
        /// <summary>
        /// Game media information and schedules
        /// </summary>
        /// <remarks>
        /// Game media information (TV, radio, etc)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile) (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ICollection&lt;GameMedia&gt;</returns>
        ICollection<GameMedia> GetGameMedia (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string mediaType = null, string classification = null);

        /// <summary>
        /// Game media information and schedules
        /// </summary>
        /// <remarks>
        /// Game media information (TV, radio, etc)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile) (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;GameMedia&gt;</returns>
        ApiResponse<ICollection<GameMedia>> GetGameMediaWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string mediaType = null, string classification = null);
        /// <summary>
        /// Game weather information (Patreon only)
        /// </summary>
        /// <remarks>
        /// Weather information for the hour of kickoff
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter (required if no year) (optional)</param>
        /// <param name="year">Year filter (required if no game id) (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ICollection&lt;GameWeather&gt;</returns>
        ICollection<GameWeather> GetGameWeather (int? gameId = null, int? year = null, int? week = null, string seasonType = null, string team = null, string conference = null, string classification = null);

        /// <summary>
        /// Game weather information (Patreon only)
        /// </summary>
        /// <remarks>
        /// Weather information for the hour of kickoff
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter (required if no year) (optional)</param>
        /// <param name="year">Year filter (required if no game id) (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;GameWeather&gt;</returns>
        ApiResponse<ICollection<GameWeather>> GetGameWeatherWithHttpInfo (int? gameId = null, int? year = null, int? week = null, string seasonType = null, string team = null, string conference = null, string classification = null);
        /// <summary>
        /// Games and results
        /// </summary>
        /// <remarks>
        /// Get game results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team (optional)</param>
        /// <param name="home">Home team filter (optional)</param>
        /// <param name="away">Away team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <param name="id">id filter for querying a single game (optional)</param>
        /// <returns>ICollection&lt;Game&gt;</returns>
        ICollection<Game> GetGames (int? year, int? week = null, string seasonType = null, string team = null, string home = null, string away = null, string conference = null, string division = null, int? id = null);

        /// <summary>
        /// Games and results
        /// </summary>
        /// <remarks>
        /// Get game results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team (optional)</param>
        /// <param name="home">Home team filter (optional)</param>
        /// <param name="away">Away team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <param name="id">id filter for querying a single game (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Game&gt;</returns>
        ApiResponse<ICollection<Game>> GetGamesWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string home = null, string away = null, string conference = null, string division = null, int? id = null);
        /// <summary>
        /// Player game stats
        /// </summary>
        /// <remarks>
        /// Player stats broken down by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="category">Category filter (e.g defensive) (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <returns>ICollection&lt;PlayerGame&gt;</returns>
        ICollection<PlayerGame> GetPlayerGameStats (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string category = null, int? gameId = null);

        /// <summary>
        /// Player game stats
        /// </summary>
        /// <remarks>
        /// Player stats broken down by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="category">Category filter (e.g defensive) (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PlayerGame&gt;</returns>
        ApiResponse<ICollection<PlayerGame>> GetPlayerGameStatsWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string category = null, int? gameId = null);
        /// <summary>
        /// Live game results (Patreon only)
        /// </summary>
        /// <remarks>
        /// Get live game results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)</param>
        /// <param name="conference">Conference abbreviation filter. (optional)</param>
        /// <returns>ICollection&lt;ScoreboardGame&gt;</returns>
        ICollection<ScoreboardGame> GetScoreboard (string classification = null, string conference = null);

        /// <summary>
        /// Live game results (Patreon only)
        /// </summary>
        /// <remarks>
        /// Get live game results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)</param>
        /// <param name="conference">Conference abbreviation filter. (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;ScoreboardGame&gt;</returns>
        ApiResponse<ICollection<ScoreboardGame>> GetScoreboardWithHttpInfo (string classification = null, string conference = null);
        /// <summary>
        /// Team game stats
        /// </summary>
        /// <remarks>
        /// Team stats broken down by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ICollection&lt;TeamGame&gt;</returns>
        ICollection<TeamGame> GetTeamGameStats (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, int? gameId = null, string classification = null);

        /// <summary>
        /// Team game stats
        /// </summary>
        /// <remarks>
        /// Team stats broken down by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamGame&gt;</returns>
        ApiResponse<ICollection<TeamGame>> GetTeamGameStatsWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, int? gameId = null, string classification = null);
        /// <summary>
        /// Team records
        /// </summary>
        /// <remarks>
        /// Get team records by year
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <returns>ICollection&lt;TeamRecord&gt;</returns>
        ICollection<TeamRecord> GetTeamRecords (int? year = null, string team = null, string conference = null);

        /// <summary>
        /// Team records
        /// </summary>
        /// <remarks>
        /// Get team records by year
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamRecord&gt;</returns>
        ApiResponse<ICollection<TeamRecord>> GetTeamRecordsWithHttpInfo (int? year = null, string team = null, string conference = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced box scores
        /// </summary>
        /// <remarks>
        /// Get advanced box score data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id parameters</param>
        /// <returns>Task of BoxScore</returns>
        System.Threading.Tasks.Task<BoxScore> GetAdvancedBoxScoreAsync (int? gameId);

        /// <summary>
        /// Advanced box scores
        /// </summary>
        /// <remarks>
        /// Get advanced box score data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id parameters</param>
        /// <returns>Task of ApiResponse (BoxScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoxScore>> GetAdvancedBoxScoreAsyncWithHttpInfo (int? gameId);
        /// <summary>
        /// Season calendar
        /// </summary>
        /// <remarks>
        /// Get calendar of weeks by season
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <returns>Task of ICollection&lt;Week&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Week>> GetCalendarAsync (int? year);

        /// <summary>
        /// Season calendar
        /// </summary>
        /// <remarks>
        /// Get calendar of weeks by season
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Week&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Week>>> GetCalendarAsyncWithHttpInfo (int? year);
        /// <summary>
        /// Game media information and schedules
        /// </summary>
        /// <remarks>
        /// Game media information (TV, radio, etc)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile) (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ICollection&lt;GameMedia&gt;</returns>
        System.Threading.Tasks.Task<ICollection<GameMedia>> GetGameMediaAsync (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string mediaType = null, string classification = null);

        /// <summary>
        /// Game media information and schedules
        /// </summary>
        /// <remarks>
        /// Game media information (TV, radio, etc)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile) (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;GameMedia&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<GameMedia>>> GetGameMediaAsyncWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string mediaType = null, string classification = null);
        /// <summary>
        /// Game weather information (Patreon only)
        /// </summary>
        /// <remarks>
        /// Weather information for the hour of kickoff
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter (required if no year) (optional)</param>
        /// <param name="year">Year filter (required if no game id) (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ICollection&lt;GameWeather&gt;</returns>
        System.Threading.Tasks.Task<ICollection<GameWeather>> GetGameWeatherAsync (int? gameId = null, int? year = null, int? week = null, string seasonType = null, string team = null, string conference = null, string classification = null);

        /// <summary>
        /// Game weather information (Patreon only)
        /// </summary>
        /// <remarks>
        /// Weather information for the hour of kickoff
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter (required if no year) (optional)</param>
        /// <param name="year">Year filter (required if no game id) (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;GameWeather&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<GameWeather>>> GetGameWeatherAsyncWithHttpInfo (int? gameId = null, int? year = null, int? week = null, string seasonType = null, string team = null, string conference = null, string classification = null);
        /// <summary>
        /// Games and results
        /// </summary>
        /// <remarks>
        /// Get game results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team (optional)</param>
        /// <param name="home">Home team filter (optional)</param>
        /// <param name="away">Away team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <param name="id">id filter for querying a single game (optional)</param>
        /// <returns>Task of ICollection&lt;Game&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Game>> GetGamesAsync (int? year, int? week = null, string seasonType = null, string team = null, string home = null, string away = null, string conference = null, string division = null, int? id = null);

        /// <summary>
        /// Games and results
        /// </summary>
        /// <remarks>
        /// Get game results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team (optional)</param>
        /// <param name="home">Home team filter (optional)</param>
        /// <param name="away">Away team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <param name="id">id filter for querying a single game (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Game&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Game>>> GetGamesAsyncWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string home = null, string away = null, string conference = null, string division = null, int? id = null);
        /// <summary>
        /// Player game stats
        /// </summary>
        /// <remarks>
        /// Player stats broken down by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="category">Category filter (e.g defensive) (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <returns>Task of ICollection&lt;PlayerGame&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PlayerGame>> GetPlayerGameStatsAsync (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string category = null, int? gameId = null);

        /// <summary>
        /// Player game stats
        /// </summary>
        /// <remarks>
        /// Player stats broken down by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="category">Category filter (e.g defensive) (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayerGame&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PlayerGame>>> GetPlayerGameStatsAsyncWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string category = null, int? gameId = null);
        /// <summary>
        /// Live game results (Patreon only)
        /// </summary>
        /// <remarks>
        /// Get live game results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)</param>
        /// <param name="conference">Conference abbreviation filter. (optional)</param>
        /// <returns>Task of ICollection&lt;ScoreboardGame&gt;</returns>
        System.Threading.Tasks.Task<ICollection<ScoreboardGame>> GetScoreboardAsync (string classification = null, string conference = null);

        /// <summary>
        /// Live game results (Patreon only)
        /// </summary>
        /// <remarks>
        /// Get live game results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)</param>
        /// <param name="conference">Conference abbreviation filter. (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;ScoreboardGame&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<ScoreboardGame>>> GetScoreboardAsyncWithHttpInfo (string classification = null, string conference = null);
        /// <summary>
        /// Team game stats
        /// </summary>
        /// <remarks>
        /// Team stats broken down by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ICollection&lt;TeamGame&gt;</returns>
        System.Threading.Tasks.Task<ICollection<TeamGame>> GetTeamGameStatsAsync (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, int? gameId = null, string classification = null);

        /// <summary>
        /// Team game stats
        /// </summary>
        /// <remarks>
        /// Team stats broken down by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamGame&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<TeamGame>>> GetTeamGameStatsAsyncWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, int? gameId = null, string classification = null);
        /// <summary>
        /// Team records
        /// </summary>
        /// <remarks>
        /// Get team records by year
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <returns>Task of ICollection&lt;TeamRecord&gt;</returns>
        System.Threading.Tasks.Task<ICollection<TeamRecord>> GetTeamRecordsAsync (int? year = null, string team = null, string conference = null);

        /// <summary>
        /// Team records
        /// </summary>
        /// <remarks>
        /// Get team records by year
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<TeamRecord>>> GetTeamRecordsAsyncWithHttpInfo (int? year = null, string team = null, string conference = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GamesApi : IGamesApi
    {
        private CFBSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamesApi(String basePath)
        {
            this.Configuration = new CFBSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GamesApi(CFBSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CFBSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CFBSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CFBSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced box scores Get advanced box score data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id parameters</param>
        /// <returns>BoxScore</returns>
        public BoxScore GetAdvancedBoxScore (int? gameId)
        {
             ApiResponse<BoxScore> localVarResponse = GetAdvancedBoxScoreWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced box scores Get advanced box score data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id parameters</param>
        /// <returns>ApiResponse of BoxScore</returns>
        public ApiResponse< BoxScore > GetAdvancedBoxScoreWithHttpInfo (int? gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GamesApi->GetAdvancedBoxScore");

            var localVarPath = "./game/box/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdvancedBoxScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoxScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BoxScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoxScore)));
        }

        /// <summary>
        /// Advanced box scores Get advanced box score data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id parameters</param>
        /// <returns>Task of BoxScore</returns>
        public async System.Threading.Tasks.Task<BoxScore> GetAdvancedBoxScoreAsync (int? gameId)
        {
             ApiResponse<BoxScore> localVarResponse = await GetAdvancedBoxScoreAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced box scores Get advanced box score data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id parameters</param>
        /// <returns>Task of ApiResponse (BoxScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BoxScore>> GetAdvancedBoxScoreAsyncWithHttpInfo (int? gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GamesApi->GetAdvancedBoxScore");

            var localVarPath = "./game/box/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdvancedBoxScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BoxScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BoxScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BoxScore)));
        }

        /// <summary>
        /// Season calendar Get calendar of weeks by season
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <returns>ICollection&lt;Week&gt;</returns>
        public ICollection<Week> GetCalendar (int? year)
        {
             ApiResponse<ICollection<Week>> localVarResponse = GetCalendarWithHttpInfo(year);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Season calendar Get calendar of weeks by season
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <returns>ApiResponse of ICollection&lt;Week&gt;</returns>
        public ApiResponse< ICollection<Week> > GetCalendarWithHttpInfo (int? year)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetCalendar");

            var localVarPath = "./calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Week>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Week>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Week>)));
        }

        /// <summary>
        /// Season calendar Get calendar of weeks by season
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <returns>Task of ICollection&lt;Week&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Week>> GetCalendarAsync (int? year)
        {
             ApiResponse<ICollection<Week>> localVarResponse = await GetCalendarAsyncWithHttpInfo(year);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Season calendar Get calendar of weeks by season
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Week&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<Week>>> GetCalendarAsyncWithHttpInfo (int? year)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetCalendar");

            var localVarPath = "./calendar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalendar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Week>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Week>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Week>)));
        }

        /// <summary>
        /// Game media information and schedules Game media information (TV, radio, etc)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile) (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ICollection&lt;GameMedia&gt;</returns>
        public ICollection<GameMedia> GetGameMedia (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string mediaType = null, string classification = null)
        {
             ApiResponse<ICollection<GameMedia>> localVarResponse = GetGameMediaWithHttpInfo(year, week, seasonType, team, conference, mediaType, classification);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Game media information and schedules Game media information (TV, radio, etc)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile) (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;GameMedia&gt;</returns>
        public ApiResponse< ICollection<GameMedia> > GetGameMediaWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string mediaType = null, string classification = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetGameMedia");

            var localVarPath = "./games/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (mediaType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaType", mediaType)); // query parameter
            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGameMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<GameMedia>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<GameMedia>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GameMedia>)));
        }

        /// <summary>
        /// Game media information and schedules Game media information (TV, radio, etc)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile) (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ICollection&lt;GameMedia&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<GameMedia>> GetGameMediaAsync (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string mediaType = null, string classification = null)
        {
             ApiResponse<ICollection<GameMedia>> localVarResponse = await GetGameMediaAsyncWithHttpInfo(year, week, seasonType, team, conference, mediaType, classification);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Game media information and schedules Game media information (TV, radio, etc)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile) (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;GameMedia&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<GameMedia>>> GetGameMediaAsyncWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string mediaType = null, string classification = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetGameMedia");

            var localVarPath = "./games/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (mediaType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mediaType", mediaType)); // query parameter
            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGameMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<GameMedia>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<GameMedia>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GameMedia>)));
        }

        /// <summary>
        /// Game weather information (Patreon only) Weather information for the hour of kickoff
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter (required if no year) (optional)</param>
        /// <param name="year">Year filter (required if no game id) (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ICollection&lt;GameWeather&gt;</returns>
        public ICollection<GameWeather> GetGameWeather (int? gameId = null, int? year = null, int? week = null, string seasonType = null, string team = null, string conference = null, string classification = null)
        {
             ApiResponse<ICollection<GameWeather>> localVarResponse = GetGameWeatherWithHttpInfo(gameId, year, week, seasonType, team, conference, classification);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Game weather information (Patreon only) Weather information for the hour of kickoff
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter (required if no year) (optional)</param>
        /// <param name="year">Year filter (required if no game id) (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;GameWeather&gt;</returns>
        public ApiResponse< ICollection<GameWeather> > GetGameWeatherWithHttpInfo (int? gameId = null, int? year = null, int? week = null, string seasonType = null, string team = null, string conference = null, string classification = null)
        {

            var localVarPath = "./games/weather";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGameWeather", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<GameWeather>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<GameWeather>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GameWeather>)));
        }

        /// <summary>
        /// Game weather information (Patreon only) Weather information for the hour of kickoff
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter (required if no year) (optional)</param>
        /// <param name="year">Year filter (required if no game id) (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ICollection&lt;GameWeather&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<GameWeather>> GetGameWeatherAsync (int? gameId = null, int? year = null, int? week = null, string seasonType = null, string team = null, string conference = null, string classification = null)
        {
             ApiResponse<ICollection<GameWeather>> localVarResponse = await GetGameWeatherAsyncWithHttpInfo(gameId, year, week, seasonType, team, conference, classification);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Game weather information (Patreon only) Weather information for the hour of kickoff
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter (required if no year) (optional)</param>
        /// <param name="year">Year filter (required if no game id) (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both) (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;GameWeather&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<GameWeather>>> GetGameWeatherAsyncWithHttpInfo (int? gameId = null, int? year = null, int? week = null, string seasonType = null, string team = null, string conference = null, string classification = null)
        {

            var localVarPath = "./games/weather";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGameWeather", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<GameWeather>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<GameWeather>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GameWeather>)));
        }

        /// <summary>
        /// Games and results Get game results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team (optional)</param>
        /// <param name="home">Home team filter (optional)</param>
        /// <param name="away">Away team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <param name="id">id filter for querying a single game (optional)</param>
        /// <returns>ICollection&lt;Game&gt;</returns>
        public ICollection<Game> GetGames (int? year, int? week = null, string seasonType = null, string team = null, string home = null, string away = null, string conference = null, string division = null, int? id = null)
        {
             ApiResponse<ICollection<Game>> localVarResponse = GetGamesWithHttpInfo(year, week, seasonType, team, home, away, conference, division, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Games and results Get game results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team (optional)</param>
        /// <param name="home">Home team filter (optional)</param>
        /// <param name="away">Away team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <param name="id">id filter for querying a single game (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Game&gt;</returns>
        public ApiResponse< ICollection<Game> > GetGamesWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string home = null, string away = null, string conference = null, string division = null, int? id = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetGames");

            var localVarPath = "./games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (home != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "home", home)); // query parameter
            if (away != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "away", away)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (division != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "division", division)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Game>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Game>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Game>)));
        }

        /// <summary>
        /// Games and results Get game results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team (optional)</param>
        /// <param name="home">Home team filter (optional)</param>
        /// <param name="away">Away team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <param name="id">id filter for querying a single game (optional)</param>
        /// <returns>Task of ICollection&lt;Game&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Game>> GetGamesAsync (int? year, int? week = null, string seasonType = null, string team = null, string home = null, string away = null, string conference = null, string division = null, int? id = null)
        {
             ApiResponse<ICollection<Game>> localVarResponse = await GetGamesAsyncWithHttpInfo(year, week, seasonType, team, home, away, conference, division, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Games and results Get game results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team (optional)</param>
        /// <param name="home">Home team filter (optional)</param>
        /// <param name="away">Away team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <param name="id">id filter for querying a single game (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Game&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<Game>>> GetGamesAsyncWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string home = null, string away = null, string conference = null, string division = null, int? id = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetGames");

            var localVarPath = "./games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (home != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "home", home)); // query parameter
            if (away != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "away", away)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (division != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "division", division)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Game>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Game>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Game>)));
        }

        /// <summary>
        /// Player game stats Player stats broken down by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="category">Category filter (e.g defensive) (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <returns>ICollection&lt;PlayerGame&gt;</returns>
        public ICollection<PlayerGame> GetPlayerGameStats (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string category = null, int? gameId = null)
        {
             ApiResponse<ICollection<PlayerGame>> localVarResponse = GetPlayerGameStatsWithHttpInfo(year, week, seasonType, team, conference, category, gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Player game stats Player stats broken down by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="category">Category filter (e.g defensive) (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PlayerGame&gt;</returns>
        public ApiResponse< ICollection<PlayerGame> > GetPlayerGameStatsWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string category = null, int? gameId = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetPlayerGameStats");

            var localVarPath = "./games/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerGameStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayerGame>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayerGame>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerGame>)));
        }

        /// <summary>
        /// Player game stats Player stats broken down by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="category">Category filter (e.g defensive) (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <returns>Task of ICollection&lt;PlayerGame&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PlayerGame>> GetPlayerGameStatsAsync (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string category = null, int? gameId = null)
        {
             ApiResponse<ICollection<PlayerGame>> localVarResponse = await GetPlayerGameStatsAsyncWithHttpInfo(year, week, seasonType, team, conference, category, gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Player game stats Player stats broken down by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="category">Category filter (e.g defensive) (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayerGame&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PlayerGame>>> GetPlayerGameStatsAsyncWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, string category = null, int? gameId = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetPlayerGameStats");

            var localVarPath = "./games/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerGameStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayerGame>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayerGame>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerGame>)));
        }

        /// <summary>
        /// Live game results (Patreon only) Get live game results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)</param>
        /// <param name="conference">Conference abbreviation filter. (optional)</param>
        /// <returns>ICollection&lt;ScoreboardGame&gt;</returns>
        public ICollection<ScoreboardGame> GetScoreboard (string classification = null, string conference = null)
        {
             ApiResponse<ICollection<ScoreboardGame>> localVarResponse = GetScoreboardWithHttpInfo(classification, conference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Live game results (Patreon only) Get live game results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)</param>
        /// <param name="conference">Conference abbreviation filter. (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;ScoreboardGame&gt;</returns>
        public ApiResponse< ICollection<ScoreboardGame> > GetScoreboardWithHttpInfo (string classification = null, string conference = null)
        {

            var localVarPath = "./scoreboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScoreboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<ScoreboardGame>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<ScoreboardGame>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ScoreboardGame>)));
        }

        /// <summary>
        /// Live game results (Patreon only) Get live game results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)</param>
        /// <param name="conference">Conference abbreviation filter. (optional)</param>
        /// <returns>Task of ICollection&lt;ScoreboardGame&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<ScoreboardGame>> GetScoreboardAsync (string classification = null, string conference = null)
        {
             ApiResponse<ICollection<ScoreboardGame>> localVarResponse = await GetScoreboardAsyncWithHttpInfo(classification, conference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Live game results (Patreon only) Get live game results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)</param>
        /// <param name="conference">Conference abbreviation filter. (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;ScoreboardGame&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<ScoreboardGame>>> GetScoreboardAsyncWithHttpInfo (string classification = null, string conference = null)
        {

            var localVarPath = "./scoreboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScoreboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<ScoreboardGame>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<ScoreboardGame>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ScoreboardGame>)));
        }

        /// <summary>
        /// Team game stats Team stats broken down by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ICollection&lt;TeamGame&gt;</returns>
        public ICollection<TeamGame> GetTeamGameStats (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, int? gameId = null, string classification = null)
        {
             ApiResponse<ICollection<TeamGame>> localVarResponse = GetTeamGameStatsWithHttpInfo(year, week, seasonType, team, conference, gameId, classification);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Team game stats Team stats broken down by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamGame&gt;</returns>
        public ApiResponse< ICollection<TeamGame> > GetTeamGameStatsWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, int? gameId = null, string classification = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetTeamGameStats");

            var localVarPath = "./games/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter
            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamGameStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamGame>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamGame>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamGame>)));
        }

        /// <summary>
        /// Team game stats Team stats broken down by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ICollection&lt;TeamGame&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<TeamGame>> GetTeamGameStatsAsync (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, int? gameId = null, string classification = null)
        {
             ApiResponse<ICollection<TeamGame>> localVarResponse = await GetTeamGameStatsAsyncWithHttpInfo(year, week, seasonType, team, conference, gameId, classification);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Team game stats Team stats broken down by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="gameId">Game id filter (optional)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii) (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamGame&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<TeamGame>>> GetTeamGameStatsAsyncWithHttpInfo (int? year, int? week = null, string seasonType = null, string team = null, string conference = null, int? gameId = null, string classification = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling GamesApi->GetTeamGameStats");

            var localVarPath = "./games/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter
            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamGameStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamGame>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamGame>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamGame>)));
        }

        /// <summary>
        /// Team records Get team records by year
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <returns>ICollection&lt;TeamRecord&gt;</returns>
        public ICollection<TeamRecord> GetTeamRecords (int? year = null, string team = null, string conference = null)
        {
             ApiResponse<ICollection<TeamRecord>> localVarResponse = GetTeamRecordsWithHttpInfo(year, team, conference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Team records Get team records by year
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamRecord&gt;</returns>
        public ApiResponse< ICollection<TeamRecord> > GetTeamRecordsWithHttpInfo (int? year = null, string team = null, string conference = null)
        {

            var localVarPath = "./records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamRecord>)));
        }

        /// <summary>
        /// Team records Get team records by year
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <returns>Task of ICollection&lt;TeamRecord&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<TeamRecord>> GetTeamRecordsAsync (int? year = null, string team = null, string conference = null)
        {
             ApiResponse<ICollection<TeamRecord>> localVarResponse = await GetTeamRecordsAsyncWithHttpInfo(year, team, conference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Team records Get team records by year
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<TeamRecord>>> GetTeamRecordsAsyncWithHttpInfo (int? year = null, string team = null, string conference = null)
        {

            var localVarPath = "./records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamRecord>)));
        }

    }
}
