/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.1.14
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CFBSharp.Client;
using CFBSharp.Model;

namespace CFBSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>ICollection&lt;GamePPA&gt;</returns>
        ICollection<GamePPA> GetGamePPA (int? year, int? week = null, string team = null, string conference = null, bool? excludeGarbageTime = null, string seasonType = null);

        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>ApiResponse of ICollection&lt;GamePPA&gt;</returns>
        ApiResponse<ICollection<GamePPA>> GetGamePPAWithHttpInfo (int? year, int? week = null, string team = null, string conference = null, bool? excludeGarbageTime = null, string seasonType = null);
        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by player game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>ICollection&lt;PlayerGamePPA&gt;</returns>
        ICollection<PlayerGamePPA> GetPlayerGamePPA (int? year = null, int? week = null, string team = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null, string seasonType = null);

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by player game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>ApiResponse of ICollection&lt;PlayerGamePPA&gt;</returns>
        ApiResponse<ICollection<PlayerGamePPA>> GetPlayerGamePPAWithHttpInfo (int? year = null, int? week = null, string team = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null, string seasonType = null);
        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by player season
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>ICollection&lt;PlayerSeasonPPA&gt;</returns>
        ICollection<PlayerSeasonPPA> GetPlayerSeasonPPA (int? year = null, string team = null, string conference = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null);

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by player season
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PlayerSeasonPPA&gt;</returns>
        ApiResponse<ICollection<PlayerSeasonPPA>> GetPlayerSeasonPPAWithHttpInfo (int? year = null, string team = null, string conference = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null);
        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP)
        /// </summary>
        /// <remarks>
        /// Predicted Points
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <returns>ICollection&lt;PredictedPoints&gt;</returns>
        ICollection<PredictedPoints> GetPredictedPoints (int? down, int? distance);

        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP)
        /// </summary>
        /// <remarks>
        /// Predicted Points
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <returns>ApiResponse of ICollection&lt;PredictedPoints&gt;</returns>
        ApiResponse<ICollection<PredictedPoints>> GetPredictedPointsWithHttpInfo (int? down, int? distance);
        /// <summary>
        /// Pregame win probability data
        /// </summary>
        /// <remarks>
        /// Pregame win probabilities
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="seasonType">regular or postseason (optional)</param>
        /// <returns>ICollection&lt;PregameWP&gt;</returns>
        ICollection<PregameWP> GetPregameWinProbabilities (int? year = null, int? week = null, string team = null, string seasonType = null);

        /// <summary>
        /// Pregame win probability data
        /// </summary>
        /// <remarks>
        /// Pregame win probabilities
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="seasonType">regular or postseason (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PregameWP&gt;</returns>
        ApiResponse<ICollection<PregameWP>> GetPregameWinProbabilitiesWithHttpInfo (int? year = null, int? week = null, string team = null, string seasonType = null);
        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (required if team not specified) (optional)</param>
        /// <param name="team">Team filter (required if year not specified) (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>ICollection&lt;TeamPPA&gt;</returns>
        ICollection<TeamPPA> GetTeamPPA (int? year = null, string team = null, string conference = null, bool? excludeGarbageTime = null);

        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (required if team not specified) (optional)</param>
        /// <param name="team">Team filter (required if year not specified) (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamPPA&gt;</returns>
        ApiResponse<ICollection<TeamPPA>> GetTeamPPAWithHttpInfo (int? year = null, string team = null, string conference = null, bool? excludeGarbageTime = null);
        /// <summary>
        /// Win probability chart data
        /// </summary>
        /// <remarks>
        /// Win probability data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter</param>
        /// <returns>ICollection&lt;PlayWP&gt;</returns>
        ICollection<PlayWP> GetWinProbabilityData (int? gameId);

        /// <summary>
        /// Win probability chart data
        /// </summary>
        /// <remarks>
        /// Win probability data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter</param>
        /// <returns>ApiResponse of ICollection&lt;PlayWP&gt;</returns>
        ApiResponse<ICollection<PlayWP>> GetWinProbabilityDataWithHttpInfo (int? gameId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>Task of ICollection&lt;GamePPA&gt;</returns>
        System.Threading.Tasks.Task<ICollection<GamePPA>> GetGamePPAAsync (int? year, int? week = null, string team = null, string conference = null, bool? excludeGarbageTime = null, string seasonType = null);

        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;GamePPA&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<GamePPA>>> GetGamePPAAsyncWithHttpInfo (int? year, int? week = null, string team = null, string conference = null, bool? excludeGarbageTime = null, string seasonType = null);
        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by player game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>Task of ICollection&lt;PlayerGamePPA&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PlayerGamePPA>> GetPlayerGamePPAAsync (int? year = null, int? week = null, string team = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null, string seasonType = null);

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by player game
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayerGamePPA&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PlayerGamePPA>>> GetPlayerGamePPAAsyncWithHttpInfo (int? year = null, int? week = null, string team = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null, string seasonType = null);
        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by player season
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>Task of ICollection&lt;PlayerSeasonPPA&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PlayerSeasonPPA>> GetPlayerSeasonPPAAsync (int? year = null, string team = null, string conference = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null);

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA) by player season
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayerSeasonPPA&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PlayerSeasonPPA>>> GetPlayerSeasonPPAAsyncWithHttpInfo (int? year = null, string team = null, string conference = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null);
        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP)
        /// </summary>
        /// <remarks>
        /// Predicted Points
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <returns>Task of ICollection&lt;PredictedPoints&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PredictedPoints>> GetPredictedPointsAsync (int? down, int? distance);

        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP)
        /// </summary>
        /// <remarks>
        /// Predicted Points
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PredictedPoints&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PredictedPoints>>> GetPredictedPointsAsyncWithHttpInfo (int? down, int? distance);
        /// <summary>
        /// Pregame win probability data
        /// </summary>
        /// <remarks>
        /// Pregame win probabilities
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="seasonType">regular or postseason (optional)</param>
        /// <returns>Task of ICollection&lt;PregameWP&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PregameWP>> GetPregameWinProbabilitiesAsync (int? year = null, int? week = null, string team = null, string seasonType = null);

        /// <summary>
        /// Pregame win probability data
        /// </summary>
        /// <remarks>
        /// Pregame win probabilities
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="seasonType">regular or postseason (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PregameWP&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PregameWP>>> GetPregameWinProbabilitiesAsyncWithHttpInfo (int? year = null, int? week = null, string team = null, string seasonType = null);
        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (required if team not specified) (optional)</param>
        /// <param name="team">Team filter (required if year not specified) (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>Task of ICollection&lt;TeamPPA&gt;</returns>
        System.Threading.Tasks.Task<ICollection<TeamPPA>> GetTeamPPAAsync (int? year = null, string team = null, string conference = null, bool? excludeGarbageTime = null);

        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team
        /// </summary>
        /// <remarks>
        /// Predicted Points Added (PPA)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (required if team not specified) (optional)</param>
        /// <param name="team">Team filter (required if year not specified) (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamPPA&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<TeamPPA>>> GetTeamPPAAsyncWithHttpInfo (int? year = null, string team = null, string conference = null, bool? excludeGarbageTime = null);
        /// <summary>
        /// Win probability chart data
        /// </summary>
        /// <remarks>
        /// Win probability data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter</param>
        /// <returns>Task of ICollection&lt;PlayWP&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PlayWP>> GetWinProbabilityDataAsync (int? gameId);

        /// <summary>
        /// Win probability chart data
        /// </summary>
        /// <remarks>
        /// Win probability data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayWP&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PlayWP>>> GetWinProbabilityDataAsyncWithHttpInfo (int? gameId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetricsApi : IMetricsApi
    {
        private CFBSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsApi(String basePath)
        {
            this.Configuration = new CFBSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetricsApi(CFBSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CFBSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CFBSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CFBSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game Predicted Points Added (PPA) by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>ICollection&lt;GamePPA&gt;</returns>
        public ICollection<GamePPA> GetGamePPA (int? year, int? week = null, string team = null, string conference = null, bool? excludeGarbageTime = null, string seasonType = null)
        {
             ApiResponse<ICollection<GamePPA>> localVarResponse = GetGamePPAWithHttpInfo(year, week, team, conference, excludeGarbageTime, seasonType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game Predicted Points Added (PPA) by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>ApiResponse of ICollection&lt;GamePPA&gt;</returns>
        public ApiResponse< ICollection<GamePPA> > GetGamePPAWithHttpInfo (int? year, int? week = null, string team = null, string conference = null, bool? excludeGarbageTime = null, string seasonType = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling MetricsApi->GetGamePPA");

            var localVarPath = "./ppa/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (excludeGarbageTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeGarbageTime", excludeGarbageTime)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGamePPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<GamePPA>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<GamePPA>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GamePPA>)));
        }

        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game Predicted Points Added (PPA) by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>Task of ICollection&lt;GamePPA&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<GamePPA>> GetGamePPAAsync (int? year, int? week = null, string team = null, string conference = null, bool? excludeGarbageTime = null, string seasonType = null)
        {
             ApiResponse<ICollection<GamePPA>> localVarResponse = await GetGamePPAAsyncWithHttpInfo(year, week, team, conference, excludeGarbageTime, seasonType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game Predicted Points Added (PPA) by game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;GamePPA&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<GamePPA>>> GetGamePPAAsyncWithHttpInfo (int? year, int? week = null, string team = null, string conference = null, bool? excludeGarbageTime = null, string seasonType = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling MetricsApi->GetGamePPA");

            var localVarPath = "./ppa/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (excludeGarbageTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeGarbageTime", excludeGarbageTime)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGamePPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<GamePPA>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<GamePPA>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GamePPA>)));
        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game Predicted Points Added (PPA) by player game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>ICollection&lt;PlayerGamePPA&gt;</returns>
        public ICollection<PlayerGamePPA> GetPlayerGamePPA (int? year = null, int? week = null, string team = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null, string seasonType = null)
        {
             ApiResponse<ICollection<PlayerGamePPA>> localVarResponse = GetPlayerGamePPAWithHttpInfo(year, week, team, position, playerId, threshold, excludeGarbageTime, seasonType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game Predicted Points Added (PPA) by player game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>ApiResponse of ICollection&lt;PlayerGamePPA&gt;</returns>
        public ApiResponse< ICollection<PlayerGamePPA> > GetPlayerGamePPAWithHttpInfo (int? year = null, int? week = null, string team = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null, string seasonType = null)
        {

            var localVarPath = "./ppa/players/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            if (threshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold", threshold)); // query parameter
            if (excludeGarbageTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeGarbageTime", excludeGarbageTime)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerGamePPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayerGamePPA>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayerGamePPA>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerGamePPA>)));
        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game Predicted Points Added (PPA) by player game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>Task of ICollection&lt;PlayerGamePPA&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PlayerGamePPA>> GetPlayerGamePPAAsync (int? year = null, int? week = null, string team = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null, string seasonType = null)
        {
             ApiResponse<ICollection<PlayerGamePPA>> localVarResponse = await GetPlayerGamePPAAsyncWithHttpInfo(year, week, team, position, playerId, threshold, excludeGarbageTime, seasonType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game Predicted Points Added (PPA) by player game
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <param name="seasonType">Season type filter (regular or postseason) (optional, default to regular)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayerGamePPA&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PlayerGamePPA>>> GetPlayerGamePPAAsyncWithHttpInfo (int? year = null, int? week = null, string team = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null, string seasonType = null)
        {

            var localVarPath = "./ppa/players/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            if (threshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold", threshold)); // query parameter
            if (excludeGarbageTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeGarbageTime", excludeGarbageTime)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerGamePPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayerGamePPA>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayerGamePPA>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerGamePPA>)));
        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season Predicted Points Added (PPA) by player season
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>ICollection&lt;PlayerSeasonPPA&gt;</returns>
        public ICollection<PlayerSeasonPPA> GetPlayerSeasonPPA (int? year = null, string team = null, string conference = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null)
        {
             ApiResponse<ICollection<PlayerSeasonPPA>> localVarResponse = GetPlayerSeasonPPAWithHttpInfo(year, team, conference, position, playerId, threshold, excludeGarbageTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season Predicted Points Added (PPA) by player season
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PlayerSeasonPPA&gt;</returns>
        public ApiResponse< ICollection<PlayerSeasonPPA> > GetPlayerSeasonPPAWithHttpInfo (int? year = null, string team = null, string conference = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null)
        {

            var localVarPath = "./ppa/players/season";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            if (threshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold", threshold)); // query parameter
            if (excludeGarbageTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeGarbageTime", excludeGarbageTime)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerSeasonPPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayerSeasonPPA>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayerSeasonPPA>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerSeasonPPA>)));
        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season Predicted Points Added (PPA) by player season
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>Task of ICollection&lt;PlayerSeasonPPA&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PlayerSeasonPPA>> GetPlayerSeasonPPAAsync (int? year = null, string team = null, string conference = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null)
        {
             ApiResponse<ICollection<PlayerSeasonPPA>> localVarResponse = await GetPlayerSeasonPPAAsyncWithHttpInfo(year, team, conference, position, playerId, threshold, excludeGarbageTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season Predicted Points Added (PPA) by player season
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="playerId">Player id filter (optional)</param>
        /// <param name="threshold">Minimum play threshold filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayerSeasonPPA&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PlayerSeasonPPA>>> GetPlayerSeasonPPAAsyncWithHttpInfo (int? year = null, string team = null, string conference = null, string position = null, int? playerId = null, string threshold = null, bool? excludeGarbageTime = null)
        {

            var localVarPath = "./ppa/players/season";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            if (threshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threshold", threshold)); // query parameter
            if (excludeGarbageTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeGarbageTime", excludeGarbageTime)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerSeasonPPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayerSeasonPPA>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayerSeasonPPA>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayerSeasonPPA>)));
        }

        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP) Predicted Points
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <returns>ICollection&lt;PredictedPoints&gt;</returns>
        public ICollection<PredictedPoints> GetPredictedPoints (int? down, int? distance)
        {
             ApiResponse<ICollection<PredictedPoints>> localVarResponse = GetPredictedPointsWithHttpInfo(down, distance);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP) Predicted Points
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <returns>ApiResponse of ICollection&lt;PredictedPoints&gt;</returns>
        public ApiResponse< ICollection<PredictedPoints> > GetPredictedPointsWithHttpInfo (int? down, int? distance)
        {
            // verify the required parameter 'down' is set
            if (down == null)
                throw new ApiException(400, "Missing required parameter 'down' when calling MetricsApi->GetPredictedPoints");
            // verify the required parameter 'distance' is set
            if (distance == null)
                throw new ApiException(400, "Missing required parameter 'distance' when calling MetricsApi->GetPredictedPoints");

            var localVarPath = "./ppa/predicted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (down != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "down", down)); // query parameter
            if (distance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distance", distance)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPredictedPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PredictedPoints>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PredictedPoints>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PredictedPoints>)));
        }

        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP) Predicted Points
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <returns>Task of ICollection&lt;PredictedPoints&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PredictedPoints>> GetPredictedPointsAsync (int? down, int? distance)
        {
             ApiResponse<ICollection<PredictedPoints>> localVarResponse = await GetPredictedPointsAsyncWithHttpInfo(down, distance);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP) Predicted Points
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PredictedPoints&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PredictedPoints>>> GetPredictedPointsAsyncWithHttpInfo (int? down, int? distance)
        {
            // verify the required parameter 'down' is set
            if (down == null)
                throw new ApiException(400, "Missing required parameter 'down' when calling MetricsApi->GetPredictedPoints");
            // verify the required parameter 'distance' is set
            if (distance == null)
                throw new ApiException(400, "Missing required parameter 'distance' when calling MetricsApi->GetPredictedPoints");

            var localVarPath = "./ppa/predicted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (down != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "down", down)); // query parameter
            if (distance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distance", distance)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPredictedPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PredictedPoints>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PredictedPoints>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PredictedPoints>)));
        }

        /// <summary>
        /// Pregame win probability data Pregame win probabilities
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="seasonType">regular or postseason (optional)</param>
        /// <returns>ICollection&lt;PregameWP&gt;</returns>
        public ICollection<PregameWP> GetPregameWinProbabilities (int? year = null, int? week = null, string team = null, string seasonType = null)
        {
             ApiResponse<ICollection<PregameWP>> localVarResponse = GetPregameWinProbabilitiesWithHttpInfo(year, week, team, seasonType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pregame win probability data Pregame win probabilities
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="seasonType">regular or postseason (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PregameWP&gt;</returns>
        public ApiResponse< ICollection<PregameWP> > GetPregameWinProbabilitiesWithHttpInfo (int? year = null, int? week = null, string team = null, string seasonType = null)
        {

            var localVarPath = "./metrics/wp/pregame";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPregameWinProbabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PregameWP>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PregameWP>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PregameWP>)));
        }

        /// <summary>
        /// Pregame win probability data Pregame win probabilities
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="seasonType">regular or postseason (optional)</param>
        /// <returns>Task of ICollection&lt;PregameWP&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PregameWP>> GetPregameWinProbabilitiesAsync (int? year = null, int? week = null, string team = null, string seasonType = null)
        {
             ApiResponse<ICollection<PregameWP>> localVarResponse = await GetPregameWinProbabilitiesAsyncWithHttpInfo(year, week, team, seasonType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pregame win probability data Pregame win probabilities
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="seasonType">regular or postseason (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PregameWP&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PregameWP>>> GetPregameWinProbabilitiesAsyncWithHttpInfo (int? year = null, int? week = null, string team = null, string seasonType = null)
        {

            var localVarPath = "./metrics/wp/pregame";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPregameWinProbabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PregameWP>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PregameWP>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PregameWP>)));
        }

        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team Predicted Points Added (PPA)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (required if team not specified) (optional)</param>
        /// <param name="team">Team filter (required if year not specified) (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>ICollection&lt;TeamPPA&gt;</returns>
        public ICollection<TeamPPA> GetTeamPPA (int? year = null, string team = null, string conference = null, bool? excludeGarbageTime = null)
        {
             ApiResponse<ICollection<TeamPPA>> localVarResponse = GetTeamPPAWithHttpInfo(year, team, conference, excludeGarbageTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team Predicted Points Added (PPA)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (required if team not specified) (optional)</param>
        /// <param name="team">Team filter (required if year not specified) (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamPPA&gt;</returns>
        public ApiResponse< ICollection<TeamPPA> > GetTeamPPAWithHttpInfo (int? year = null, string team = null, string conference = null, bool? excludeGarbageTime = null)
        {

            var localVarPath = "./ppa/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (excludeGarbageTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeGarbageTime", excludeGarbageTime)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamPPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamPPA>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamPPA>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamPPA>)));
        }

        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team Predicted Points Added (PPA)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (required if team not specified) (optional)</param>
        /// <param name="team">Team filter (required if year not specified) (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>Task of ICollection&lt;TeamPPA&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<TeamPPA>> GetTeamPPAAsync (int? year = null, string team = null, string conference = null, bool? excludeGarbageTime = null)
        {
             ApiResponse<ICollection<TeamPPA>> localVarResponse = await GetTeamPPAAsyncWithHttpInfo(year, team, conference, excludeGarbageTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team Predicted Points Added (PPA)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (required if team not specified) (optional)</param>
        /// <param name="team">Team filter (required if year not specified) (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamPPA&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<TeamPPA>>> GetTeamPPAAsyncWithHttpInfo (int? year = null, string team = null, string conference = null, bool? excludeGarbageTime = null)
        {

            var localVarPath = "./ppa/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (excludeGarbageTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeGarbageTime", excludeGarbageTime)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamPPA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamPPA>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamPPA>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamPPA>)));
        }

        /// <summary>
        /// Win probability chart data Win probability data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter</param>
        /// <returns>ICollection&lt;PlayWP&gt;</returns>
        public ICollection<PlayWP> GetWinProbabilityData (int? gameId)
        {
             ApiResponse<ICollection<PlayWP>> localVarResponse = GetWinProbabilityDataWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Win probability chart data Win probability data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter</param>
        /// <returns>ApiResponse of ICollection&lt;PlayWP&gt;</returns>
        public ApiResponse< ICollection<PlayWP> > GetWinProbabilityDataWithHttpInfo (int? gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling MetricsApi->GetWinProbabilityData");

            var localVarPath = "./metrics/wp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWinProbabilityData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayWP>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayWP>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayWP>)));
        }

        /// <summary>
        /// Win probability chart data Win probability data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter</param>
        /// <returns>Task of ICollection&lt;PlayWP&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PlayWP>> GetWinProbabilityDataAsync (int? gameId)
        {
             ApiResponse<ICollection<PlayWP>> localVarResponse = await GetWinProbabilityDataAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Win probability chart data Win probability data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Game id filter</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayWP&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PlayWP>>> GetWinProbabilityDataAsyncWithHttpInfo (int? gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling MetricsApi->GetWinProbabilityData");

            var localVarPath = "./metrics/wp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWinProbabilityData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayWP>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayWP>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayWP>)));
        }

    }
}
