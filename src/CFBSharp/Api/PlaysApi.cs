/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.1.13
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CFBSharp.Client;
using CFBSharp.Model;

namespace CFBSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaysApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Types of player play stats
        /// </summary>
        /// <remarks>
        /// Type of play stats
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;PlayStatType&gt;</returns>
        ICollection<PlayStatType> GetPlayStatTypes ();

        /// <summary>
        /// Types of player play stats
        /// </summary>
        /// <remarks>
        /// Type of play stats
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;PlayStatType&gt;</returns>
        ApiResponse<ICollection<PlayStatType>> GetPlayStatTypesWithHttpInfo ();
        /// <summary>
        /// Play stats by play
        /// </summary>
        /// <remarks>
        /// Gets player stats associated by play (limit 1000)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="gameId">gameId filter (from /games endpoint) (optional)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint) (optional)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint) (optional)</param>
        /// <param name="seasonType">regular, postseason, or both (optional)</param>
        /// <param name="conference">conference abbreviation filter (optional)</param>
        /// <returns>ICollection&lt;PlayStat&gt;</returns>
        ICollection<PlayStat> GetPlayStats (int? year = null, int? week = null, string team = null, int? gameId = null, int? athleteId = null, int? statTypeId = null, string seasonType = null, string conference = null);

        /// <summary>
        /// Play stats by play
        /// </summary>
        /// <remarks>
        /// Gets player stats associated by play (limit 1000)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="gameId">gameId filter (from /games endpoint) (optional)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint) (optional)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint) (optional)</param>
        /// <param name="seasonType">regular, postseason, or both (optional)</param>
        /// <param name="conference">conference abbreviation filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PlayStat&gt;</returns>
        ApiResponse<ICollection<PlayStat>> GetPlayStatsWithHttpInfo (int? year = null, int? week = null, string team = null, int? gameId = null, int? athleteId = null, int? statTypeId = null, string seasonType = null, string conference = null);
        /// <summary>
        /// Play types
        /// </summary>
        /// <remarks>
        /// Types of plays
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;PlayType&gt;</returns>
        ICollection<PlayType> GetPlayTypes ();

        /// <summary>
        /// Play types
        /// </summary>
        /// <remarks>
        /// Types of plays
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;PlayType&gt;</returns>
        ApiResponse<ICollection<PlayType>> GetPlayTypesWithHttpInfo ();
        /// <summary>
        /// Play by play data
        /// </summary>
        /// <remarks>
        /// Get play data and results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="offense">Offensive team filter (optional)</param>
        /// <param name="defense">Defensive team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="offenseConference">Offensive conference filter (optional)</param>
        /// <param name="defenseConference">Defensive conference filter (optional)</param>
        /// <param name="playType">Play type filter (optional)</param>
        /// <returns>ICollection&lt;Play&gt;</returns>
        ICollection<Play> GetPlays (int? year, int? week, string seasonType = null, string team = null, string offense = null, string defense = null, string conference = null, string offenseConference = null, string defenseConference = null, int? playType = null);

        /// <summary>
        /// Play by play data
        /// </summary>
        /// <remarks>
        /// Get play data and results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="offense">Offensive team filter (optional)</param>
        /// <param name="defense">Defensive team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="offenseConference">Offensive conference filter (optional)</param>
        /// <param name="defenseConference">Defensive conference filter (optional)</param>
        /// <param name="playType">Play type filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Play&gt;</returns>
        ApiResponse<ICollection<Play>> GetPlaysWithHttpInfo (int? year, int? week, string seasonType = null, string team = null, string offense = null, string defense = null, string conference = null, string offenseConference = null, string defenseConference = null, int? playType = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Types of player play stats
        /// </summary>
        /// <remarks>
        /// Type of play stats
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;PlayStatType&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PlayStatType>> GetPlayStatTypesAsync ();

        /// <summary>
        /// Types of player play stats
        /// </summary>
        /// <remarks>
        /// Type of play stats
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayStatType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PlayStatType>>> GetPlayStatTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Play stats by play
        /// </summary>
        /// <remarks>
        /// Gets player stats associated by play (limit 1000)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="gameId">gameId filter (from /games endpoint) (optional)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint) (optional)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint) (optional)</param>
        /// <param name="seasonType">regular, postseason, or both (optional)</param>
        /// <param name="conference">conference abbreviation filter (optional)</param>
        /// <returns>Task of ICollection&lt;PlayStat&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PlayStat>> GetPlayStatsAsync (int? year = null, int? week = null, string team = null, int? gameId = null, int? athleteId = null, int? statTypeId = null, string seasonType = null, string conference = null);

        /// <summary>
        /// Play stats by play
        /// </summary>
        /// <remarks>
        /// Gets player stats associated by play (limit 1000)
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="gameId">gameId filter (from /games endpoint) (optional)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint) (optional)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint) (optional)</param>
        /// <param name="seasonType">regular, postseason, or both (optional)</param>
        /// <param name="conference">conference abbreviation filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayStat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PlayStat>>> GetPlayStatsAsyncWithHttpInfo (int? year = null, int? week = null, string team = null, int? gameId = null, int? athleteId = null, int? statTypeId = null, string seasonType = null, string conference = null);
        /// <summary>
        /// Play types
        /// </summary>
        /// <remarks>
        /// Types of plays
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;PlayType&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PlayType>> GetPlayTypesAsync ();

        /// <summary>
        /// Play types
        /// </summary>
        /// <remarks>
        /// Types of plays
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PlayType>>> GetPlayTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Play by play data
        /// </summary>
        /// <remarks>
        /// Get play data and results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="offense">Offensive team filter (optional)</param>
        /// <param name="defense">Defensive team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="offenseConference">Offensive conference filter (optional)</param>
        /// <param name="defenseConference">Defensive conference filter (optional)</param>
        /// <param name="playType">Play type filter (optional)</param>
        /// <returns>Task of ICollection&lt;Play&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Play>> GetPlaysAsync (int? year, int? week, string seasonType = null, string team = null, string offense = null, string defense = null, string conference = null, string offenseConference = null, string defenseConference = null, int? playType = null);

        /// <summary>
        /// Play by play data
        /// </summary>
        /// <remarks>
        /// Get play data and results
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="offense">Offensive team filter (optional)</param>
        /// <param name="defense">Defensive team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="offenseConference">Offensive conference filter (optional)</param>
        /// <param name="defenseConference">Defensive conference filter (optional)</param>
        /// <param name="playType">Play type filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Play&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Play>>> GetPlaysAsyncWithHttpInfo (int? year, int? week, string seasonType = null, string team = null, string offense = null, string defense = null, string conference = null, string offenseConference = null, string defenseConference = null, int? playType = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaysApi : IPlaysApi
    {
        private CFBSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaysApi(String basePath)
        {
            this.Configuration = new CFBSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaysApi(CFBSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CFBSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CFBSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CFBSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Types of player play stats Type of play stats
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;PlayStatType&gt;</returns>
        public ICollection<PlayStatType> GetPlayStatTypes ()
        {
             ApiResponse<ICollection<PlayStatType>> localVarResponse = GetPlayStatTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Types of player play stats Type of play stats
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;PlayStatType&gt;</returns>
        public ApiResponse< ICollection<PlayStatType> > GetPlayStatTypesWithHttpInfo ()
        {

            var localVarPath = "./play/stat/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayStatTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayStatType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayStatType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayStatType>)));
        }

        /// <summary>
        /// Types of player play stats Type of play stats
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;PlayStatType&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PlayStatType>> GetPlayStatTypesAsync ()
        {
             ApiResponse<ICollection<PlayStatType>> localVarResponse = await GetPlayStatTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Types of player play stats Type of play stats
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayStatType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PlayStatType>>> GetPlayStatTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "./play/stat/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayStatTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayStatType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayStatType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayStatType>)));
        }

        /// <summary>
        /// Play stats by play Gets player stats associated by play (limit 1000)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="gameId">gameId filter (from /games endpoint) (optional)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint) (optional)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint) (optional)</param>
        /// <param name="seasonType">regular, postseason, or both (optional)</param>
        /// <param name="conference">conference abbreviation filter (optional)</param>
        /// <returns>ICollection&lt;PlayStat&gt;</returns>
        public ICollection<PlayStat> GetPlayStats (int? year = null, int? week = null, string team = null, int? gameId = null, int? athleteId = null, int? statTypeId = null, string seasonType = null, string conference = null)
        {
             ApiResponse<ICollection<PlayStat>> localVarResponse = GetPlayStatsWithHttpInfo(year, week, team, gameId, athleteId, statTypeId, seasonType, conference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Play stats by play Gets player stats associated by play (limit 1000)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="gameId">gameId filter (from /games endpoint) (optional)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint) (optional)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint) (optional)</param>
        /// <param name="seasonType">regular, postseason, or both (optional)</param>
        /// <param name="conference">conference abbreviation filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PlayStat&gt;</returns>
        public ApiResponse< ICollection<PlayStat> > GetPlayStatsWithHttpInfo (int? year = null, int? week = null, string team = null, int? gameId = null, int? athleteId = null, int? statTypeId = null, string seasonType = null, string conference = null)
        {

            var localVarPath = "./play/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter
            if (athleteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "athleteId", athleteId)); // query parameter
            if (statTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statTypeId", statTypeId)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayStat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayStat>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayStat>)));
        }

        /// <summary>
        /// Play stats by play Gets player stats associated by play (limit 1000)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="gameId">gameId filter (from /games endpoint) (optional)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint) (optional)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint) (optional)</param>
        /// <param name="seasonType">regular, postseason, or both (optional)</param>
        /// <param name="conference">conference abbreviation filter (optional)</param>
        /// <returns>Task of ICollection&lt;PlayStat&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PlayStat>> GetPlayStatsAsync (int? year = null, int? week = null, string team = null, int? gameId = null, int? athleteId = null, int? statTypeId = null, string seasonType = null, string conference = null)
        {
             ApiResponse<ICollection<PlayStat>> localVarResponse = await GetPlayStatsAsyncWithHttpInfo(year, week, team, gameId, athleteId, statTypeId, seasonType, conference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Play stats by play Gets player stats associated by play (limit 1000)
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <param name="week">Week filter (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="gameId">gameId filter (from /games endpoint) (optional)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint) (optional)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint) (optional)</param>
        /// <param name="seasonType">regular, postseason, or both (optional)</param>
        /// <param name="conference">conference abbreviation filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayStat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PlayStat>>> GetPlayStatsAsyncWithHttpInfo (int? year = null, int? week = null, string team = null, int? gameId = null, int? athleteId = null, int? statTypeId = null, string seasonType = null, string conference = null)
        {

            var localVarPath = "./play/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (gameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gameId", gameId)); // query parameter
            if (athleteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "athleteId", athleteId)); // query parameter
            if (statTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statTypeId", statTypeId)); // query parameter
            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayStat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayStat>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayStat>)));
        }

        /// <summary>
        /// Play types Types of plays
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;PlayType&gt;</returns>
        public ICollection<PlayType> GetPlayTypes ()
        {
             ApiResponse<ICollection<PlayType>> localVarResponse = GetPlayTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Play types Types of plays
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;PlayType&gt;</returns>
        public ApiResponse< ICollection<PlayType> > GetPlayTypesWithHttpInfo ()
        {

            var localVarPath = "./play/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayType>)));
        }

        /// <summary>
        /// Play types Types of plays
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;PlayType&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PlayType>> GetPlayTypesAsync ()
        {
             ApiResponse<ICollection<PlayType>> localVarResponse = await GetPlayTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Play types Types of plays
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;PlayType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PlayType>>> GetPlayTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "./play/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PlayType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PlayType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlayType>)));
        }

        /// <summary>
        /// Play by play data Get play data and results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="offense">Offensive team filter (optional)</param>
        /// <param name="defense">Defensive team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="offenseConference">Offensive conference filter (optional)</param>
        /// <param name="defenseConference">Defensive conference filter (optional)</param>
        /// <param name="playType">Play type filter (optional)</param>
        /// <returns>ICollection&lt;Play&gt;</returns>
        public ICollection<Play> GetPlays (int? year, int? week, string seasonType = null, string team = null, string offense = null, string defense = null, string conference = null, string offenseConference = null, string defenseConference = null, int? playType = null)
        {
             ApiResponse<ICollection<Play>> localVarResponse = GetPlaysWithHttpInfo(year, week, seasonType, team, offense, defense, conference, offenseConference, defenseConference, playType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Play by play data Get play data and results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="offense">Offensive team filter (optional)</param>
        /// <param name="defense">Defensive team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="offenseConference">Offensive conference filter (optional)</param>
        /// <param name="defenseConference">Defensive conference filter (optional)</param>
        /// <param name="playType">Play type filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Play&gt;</returns>
        public ApiResponse< ICollection<Play> > GetPlaysWithHttpInfo (int? year, int? week, string seasonType = null, string team = null, string offense = null, string defense = null, string conference = null, string offenseConference = null, string defenseConference = null, int? playType = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling PlaysApi->GetPlays");
            // verify the required parameter 'week' is set
            if (week == null)
                throw new ApiException(400, "Missing required parameter 'week' when calling PlaysApi->GetPlays");

            var localVarPath = "./plays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (offense != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offense", offense)); // query parameter
            if (defense != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defense", defense)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (offenseConference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offenseConference", offenseConference)); // query parameter
            if (defenseConference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defenseConference", defenseConference)); // query parameter
            if (playType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playType", playType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Play>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Play>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Play>)));
        }

        /// <summary>
        /// Play by play data Get play data and results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="offense">Offensive team filter (optional)</param>
        /// <param name="defense">Defensive team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="offenseConference">Offensive conference filter (optional)</param>
        /// <param name="defenseConference">Defensive conference filter (optional)</param>
        /// <param name="playType">Play type filter (optional)</param>
        /// <returns>Task of ICollection&lt;Play&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Play>> GetPlaysAsync (int? year, int? week, string seasonType = null, string team = null, string offense = null, string defense = null, string conference = null, string offenseConference = null, string defenseConference = null, int? playType = null)
        {
             ApiResponse<ICollection<Play>> localVarResponse = await GetPlaysAsyncWithHttpInfo(year, week, seasonType, team, offense, defense, conference, offenseConference, defenseConference, playType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Play by play data Get play data and results
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter (optional, default to regular)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="offense">Offensive team filter (optional)</param>
        /// <param name="defense">Defensive team filter (optional)</param>
        /// <param name="conference">Conference filter (optional)</param>
        /// <param name="offenseConference">Offensive conference filter (optional)</param>
        /// <param name="defenseConference">Defensive conference filter (optional)</param>
        /// <param name="playType">Play type filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Play&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<Play>>> GetPlaysAsyncWithHttpInfo (int? year, int? week, string seasonType = null, string team = null, string offense = null, string defense = null, string conference = null, string offenseConference = null, string defenseConference = null, int? playType = null)
        {
            // verify the required parameter 'year' is set
            if (year == null)
                throw new ApiException(400, "Missing required parameter 'year' when calling PlaysApi->GetPlays");
            // verify the required parameter 'week' is set
            if (week == null)
                throw new ApiException(400, "Missing required parameter 'week' when calling PlaysApi->GetPlays");

            var localVarPath = "./plays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seasonType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seasonType", seasonType)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (week != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "week", week)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (offense != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offense", offense)); // query parameter
            if (defense != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defense", defense)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter
            if (offenseConference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offenseConference", offenseConference)); // query parameter
            if (defenseConference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "defenseConference", defenseConference)); // query parameter
            if (playType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playType", playType)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Play>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Play>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Play>)));
        }

    }
}
