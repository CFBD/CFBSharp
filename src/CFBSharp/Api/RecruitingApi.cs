/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.1.13
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CFBSharp.Client;
using CFBSharp.Model;

namespace CFBSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecruitingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Recruit position group ratings
        /// </summary>
        /// <remarks>
        /// Gets a list of aggregated statistics by team and position grouping
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startYear">Starting year (optional)</param>
        /// <param name="endYear">Ending year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">conference filter (optional)</param>
        /// <returns>ICollection&lt;PositionGroupRecruitingRating&gt;</returns>
        ICollection<PositionGroupRecruitingRating> GetRecruitingGroups (int? startYear = null, int? endYear = null, string team = null, string conference = null);

        /// <summary>
        /// Recruit position group ratings
        /// </summary>
        /// <remarks>
        /// Gets a list of aggregated statistics by team and position grouping
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startYear">Starting year (optional)</param>
        /// <param name="endYear">Ending year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">conference filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PositionGroupRecruitingRating&gt;</returns>
        ApiResponse<ICollection<PositionGroupRecruitingRating>> GetRecruitingGroupsWithHttpInfo (int? startYear = null, int? endYear = null, string team = null, string conference = null);
        /// <summary>
        /// Player recruiting ratings and rankings
        /// </summary>
        /// <remarks>
        /// Get player recruiting rankings and data. Requires either a year or team to be specified.
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (required if team no specified) (optional)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="state">State or province abbreviation filter (optional)</param>
        /// <param name="team">Committed team filter (required if year not specified) (optional)</param>
        /// <returns>ICollection&lt;Recruit&gt;</returns>
        ICollection<Recruit> GetRecruitingPlayers (int? year = null, string classification = null, string position = null, string state = null, string team = null);

        /// <summary>
        /// Player recruiting ratings and rankings
        /// </summary>
        /// <remarks>
        /// Get player recruiting rankings and data. Requires either a year or team to be specified.
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (required if team no specified) (optional)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="state">State or province abbreviation filter (optional)</param>
        /// <param name="team">Committed team filter (required if year not specified) (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Recruit&gt;</returns>
        ApiResponse<ICollection<Recruit>> GetRecruitingPlayersWithHttpInfo (int? year = null, string classification = null, string position = null, string state = null, string team = null);
        /// <summary>
        /// Team recruiting rankings and ratings
        /// </summary>
        /// <remarks>
        /// Team recruiting rankings
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <returns>ICollection&lt;TeamRecruitingRank&gt;</returns>
        ICollection<TeamRecruitingRank> GetRecruitingTeams (int? year = null, string team = null);

        /// <summary>
        /// Team recruiting rankings and ratings
        /// </summary>
        /// <remarks>
        /// Team recruiting rankings
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamRecruitingRank&gt;</returns>
        ApiResponse<ICollection<TeamRecruitingRank>> GetRecruitingTeamsWithHttpInfo (int? year = null, string team = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Recruit position group ratings
        /// </summary>
        /// <remarks>
        /// Gets a list of aggregated statistics by team and position grouping
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startYear">Starting year (optional)</param>
        /// <param name="endYear">Ending year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">conference filter (optional)</param>
        /// <returns>Task of ICollection&lt;PositionGroupRecruitingRating&gt;</returns>
        System.Threading.Tasks.Task<ICollection<PositionGroupRecruitingRating>> GetRecruitingGroupsAsync (int? startYear = null, int? endYear = null, string team = null, string conference = null);

        /// <summary>
        /// Recruit position group ratings
        /// </summary>
        /// <remarks>
        /// Gets a list of aggregated statistics by team and position grouping
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startYear">Starting year (optional)</param>
        /// <param name="endYear">Ending year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">conference filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PositionGroupRecruitingRating&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<PositionGroupRecruitingRating>>> GetRecruitingGroupsAsyncWithHttpInfo (int? startYear = null, int? endYear = null, string team = null, string conference = null);
        /// <summary>
        /// Player recruiting ratings and rankings
        /// </summary>
        /// <remarks>
        /// Get player recruiting rankings and data. Requires either a year or team to be specified.
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (required if team no specified) (optional)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="state">State or province abbreviation filter (optional)</param>
        /// <param name="team">Committed team filter (required if year not specified) (optional)</param>
        /// <returns>Task of ICollection&lt;Recruit&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Recruit>> GetRecruitingPlayersAsync (int? year = null, string classification = null, string position = null, string state = null, string team = null);

        /// <summary>
        /// Player recruiting ratings and rankings
        /// </summary>
        /// <remarks>
        /// Get player recruiting rankings and data. Requires either a year or team to be specified.
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (required if team no specified) (optional)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="state">State or province abbreviation filter (optional)</param>
        /// <param name="team">Committed team filter (required if year not specified) (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Recruit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Recruit>>> GetRecruitingPlayersAsyncWithHttpInfo (int? year = null, string classification = null, string position = null, string state = null, string team = null);
        /// <summary>
        /// Team recruiting rankings and ratings
        /// </summary>
        /// <remarks>
        /// Team recruiting rankings
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <returns>Task of ICollection&lt;TeamRecruitingRank&gt;</returns>
        System.Threading.Tasks.Task<ICollection<TeamRecruitingRank>> GetRecruitingTeamsAsync (int? year = null, string team = null);

        /// <summary>
        /// Team recruiting rankings and ratings
        /// </summary>
        /// <remarks>
        /// Team recruiting rankings
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamRecruitingRank&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<TeamRecruitingRank>>> GetRecruitingTeamsAsyncWithHttpInfo (int? year = null, string team = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecruitingApi : IRecruitingApi
    {
        private CFBSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecruitingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecruitingApi(String basePath)
        {
            this.Configuration = new CFBSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecruitingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecruitingApi(CFBSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CFBSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CFBSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CFBSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Recruit position group ratings Gets a list of aggregated statistics by team and position grouping
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startYear">Starting year (optional)</param>
        /// <param name="endYear">Ending year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">conference filter (optional)</param>
        /// <returns>ICollection&lt;PositionGroupRecruitingRating&gt;</returns>
        public ICollection<PositionGroupRecruitingRating> GetRecruitingGroups (int? startYear = null, int? endYear = null, string team = null, string conference = null)
        {
             ApiResponse<ICollection<PositionGroupRecruitingRating>> localVarResponse = GetRecruitingGroupsWithHttpInfo(startYear, endYear, team, conference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recruit position group ratings Gets a list of aggregated statistics by team and position grouping
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startYear">Starting year (optional)</param>
        /// <param name="endYear">Ending year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">conference filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;PositionGroupRecruitingRating&gt;</returns>
        public ApiResponse< ICollection<PositionGroupRecruitingRating> > GetRecruitingGroupsWithHttpInfo (int? startYear = null, int? endYear = null, string team = null, string conference = null)
        {

            var localVarPath = "./recruiting/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startYear", startYear)); // query parameter
            if (endYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endYear", endYear)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecruitingGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PositionGroupRecruitingRating>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PositionGroupRecruitingRating>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PositionGroupRecruitingRating>)));
        }

        /// <summary>
        /// Recruit position group ratings Gets a list of aggregated statistics by team and position grouping
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startYear">Starting year (optional)</param>
        /// <param name="endYear">Ending year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">conference filter (optional)</param>
        /// <returns>Task of ICollection&lt;PositionGroupRecruitingRating&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<PositionGroupRecruitingRating>> GetRecruitingGroupsAsync (int? startYear = null, int? endYear = null, string team = null, string conference = null)
        {
             ApiResponse<ICollection<PositionGroupRecruitingRating>> localVarResponse = await GetRecruitingGroupsAsyncWithHttpInfo(startYear, endYear, team, conference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recruit position group ratings Gets a list of aggregated statistics by team and position grouping
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startYear">Starting year (optional)</param>
        /// <param name="endYear">Ending year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <param name="conference">conference filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;PositionGroupRecruitingRating&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<PositionGroupRecruitingRating>>> GetRecruitingGroupsAsyncWithHttpInfo (int? startYear = null, int? endYear = null, string team = null, string conference = null)
        {

            var localVarPath = "./recruiting/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startYear", startYear)); // query parameter
            if (endYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endYear", endYear)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecruitingGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<PositionGroupRecruitingRating>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<PositionGroupRecruitingRating>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PositionGroupRecruitingRating>)));
        }

        /// <summary>
        /// Player recruiting ratings and rankings Get player recruiting rankings and data. Requires either a year or team to be specified.
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (required if team no specified) (optional)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="state">State or province abbreviation filter (optional)</param>
        /// <param name="team">Committed team filter (required if year not specified) (optional)</param>
        /// <returns>ICollection&lt;Recruit&gt;</returns>
        public ICollection<Recruit> GetRecruitingPlayers (int? year = null, string classification = null, string position = null, string state = null, string team = null)
        {
             ApiResponse<ICollection<Recruit>> localVarResponse = GetRecruitingPlayersWithHttpInfo(year, classification, position, state, team);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Player recruiting ratings and rankings Get player recruiting rankings and data. Requires either a year or team to be specified.
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (required if team no specified) (optional)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="state">State or province abbreviation filter (optional)</param>
        /// <param name="team">Committed team filter (required if year not specified) (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Recruit&gt;</returns>
        public ApiResponse< ICollection<Recruit> > GetRecruitingPlayersWithHttpInfo (int? year = null, string classification = null, string position = null, string state = null, string team = null)
        {

            var localVarPath = "./recruiting/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecruitingPlayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Recruit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Recruit>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Recruit>)));
        }

        /// <summary>
        /// Player recruiting ratings and rankings Get player recruiting rankings and data. Requires either a year or team to be specified.
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (required if team no specified) (optional)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="state">State or province abbreviation filter (optional)</param>
        /// <param name="team">Committed team filter (required if year not specified) (optional)</param>
        /// <returns>Task of ICollection&lt;Recruit&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Recruit>> GetRecruitingPlayersAsync (int? year = null, string classification = null, string position = null, string state = null, string team = null)
        {
             ApiResponse<ICollection<Recruit>> localVarResponse = await GetRecruitingPlayersAsyncWithHttpInfo(year, classification, position, state, team);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Player recruiting ratings and rankings Get player recruiting rankings and data. Requires either a year or team to be specified.
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (required if team no specified) (optional)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)</param>
        /// <param name="position">Position abbreviation filter (optional)</param>
        /// <param name="state">State or province abbreviation filter (optional)</param>
        /// <param name="team">Committed team filter (required if year not specified) (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Recruit&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<Recruit>>> GetRecruitingPlayersAsyncWithHttpInfo (int? year = null, string classification = null, string position = null, string state = null, string team = null)
        {

            var localVarPath = "./recruiting/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (classification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter
            if (position != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "position", position)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecruitingPlayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Recruit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Recruit>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Recruit>)));
        }

        /// <summary>
        /// Team recruiting rankings and ratings Team recruiting rankings
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <returns>ICollection&lt;TeamRecruitingRank&gt;</returns>
        public ICollection<TeamRecruitingRank> GetRecruitingTeams (int? year = null, string team = null)
        {
             ApiResponse<ICollection<TeamRecruitingRank>> localVarResponse = GetRecruitingTeamsWithHttpInfo(year, team);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Team recruiting rankings and ratings Team recruiting rankings
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamRecruitingRank&gt;</returns>
        public ApiResponse< ICollection<TeamRecruitingRank> > GetRecruitingTeamsWithHttpInfo (int? year = null, string team = null)
        {

            var localVarPath = "./recruiting/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecruitingTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamRecruitingRank>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamRecruitingRank>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamRecruitingRank>)));
        }

        /// <summary>
        /// Team recruiting rankings and ratings Team recruiting rankings
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <returns>Task of ICollection&lt;TeamRecruitingRank&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<TeamRecruitingRank>> GetRecruitingTeamsAsync (int? year = null, string team = null)
        {
             ApiResponse<ICollection<TeamRecruitingRank>> localVarResponse = await GetRecruitingTeamsAsyncWithHttpInfo(year, team);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Team recruiting rankings and ratings Team recruiting rankings
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Recruiting class year (optional)</param>
        /// <param name="team">Team filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamRecruitingRank&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<TeamRecruitingRank>>> GetRecruitingTeamsAsyncWithHttpInfo (int? year = null, string team = null)
        {

            var localVarPath = "./recruiting/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecruitingTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamRecruitingRank>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamRecruitingRank>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamRecruitingRank>)));
        }

    }
}
