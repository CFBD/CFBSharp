/* 
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.5.1
 * Contact: admin@collegefootballdata.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CFBSharp.Client;
using CFBSharp.Model;

namespace CFBSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// FBS team list
        /// </summary>
        /// <remarks>
        /// Information on major division teams
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>ICollection&lt;Team&gt;</returns>
        ICollection<Team> GetFbsTeams (int? year = null);

        /// <summary>
        /// FBS team list
        /// </summary>
        /// <remarks>
        /// Information on major division teams
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Team&gt;</returns>
        ApiResponse<ICollection<Team>> GetFbsTeamsWithHttpInfo (int? year = null);
        /// <summary>
        /// Team rosters
        /// </summary>
        /// <remarks>
        /// Roster data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Team name (optional)</param>
        /// <param name="year">Season year (optional)</param>
        /// <returns>ICollection&lt;Player&gt;</returns>
        ICollection<Player> GetRoster (string team = null, int? year = null);

        /// <summary>
        /// Team rosters
        /// </summary>
        /// <remarks>
        /// Roster data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Team name (optional)</param>
        /// <param name="year">Season year (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Player&gt;</returns>
        ApiResponse<ICollection<Player>> GetRosterWithHttpInfo (string team = null, int? year = null);
        /// <summary>
        /// Team talent composite rankings
        /// </summary>
        /// <remarks>
        /// Team talent composite
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>ICollection&lt;TeamTalent&gt;</returns>
        ICollection<TeamTalent> GetTalent (int? year = null);

        /// <summary>
        /// Team talent composite rankings
        /// </summary>
        /// <remarks>
        /// Team talent composite
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamTalent&gt;</returns>
        ApiResponse<ICollection<TeamTalent>> GetTalentWithHttpInfo (int? year = null);
        /// <summary>
        /// Team matchup history
        /// </summary>
        /// <remarks>
        /// Matchup history
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team1">First team</param>
        /// <param name="team2">Second team</param>
        /// <param name="minYear">Minimum year (optional)</param>
        /// <param name="maxYear">Maximum year (optional)</param>
        /// <returns>TeamMatchup</returns>
        TeamMatchup GetTeamMatchup (string team1, string team2, int? minYear = null, int? maxYear = null);

        /// <summary>
        /// Team matchup history
        /// </summary>
        /// <remarks>
        /// Matchup history
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team1">First team</param>
        /// <param name="team2">Second team</param>
        /// <param name="minYear">Minimum year (optional)</param>
        /// <param name="maxYear">Maximum year (optional)</param>
        /// <returns>ApiResponse of TeamMatchup</returns>
        ApiResponse<TeamMatchup> GetTeamMatchupWithHttpInfo (string team1, string team2, int? minYear = null, int? maxYear = null);
        /// <summary>
        /// Team information
        /// </summary>
        /// <remarks>
        /// Get team information
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <returns>ICollection&lt;Team&gt;</returns>
        ICollection<Team> GetTeams (string conference = null);

        /// <summary>
        /// Team information
        /// </summary>
        /// <remarks>
        /// Get team information
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Team&gt;</returns>
        ApiResponse<ICollection<Team>> GetTeamsWithHttpInfo (string conference = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// FBS team list
        /// </summary>
        /// <remarks>
        /// Information on major division teams
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>Task of ICollection&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Team>> GetFbsTeamsAsync (int? year = null);

        /// <summary>
        /// FBS team list
        /// </summary>
        /// <remarks>
        /// Information on major division teams
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Team>>> GetFbsTeamsAsyncWithHttpInfo (int? year = null);
        /// <summary>
        /// Team rosters
        /// </summary>
        /// <remarks>
        /// Roster data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Team name (optional)</param>
        /// <param name="year">Season year (optional)</param>
        /// <returns>Task of ICollection&lt;Player&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Player>> GetRosterAsync (string team = null, int? year = null);

        /// <summary>
        /// Team rosters
        /// </summary>
        /// <remarks>
        /// Roster data
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Team name (optional)</param>
        /// <param name="year">Season year (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Player&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Player>>> GetRosterAsyncWithHttpInfo (string team = null, int? year = null);
        /// <summary>
        /// Team talent composite rankings
        /// </summary>
        /// <remarks>
        /// Team talent composite
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>Task of ICollection&lt;TeamTalent&gt;</returns>
        System.Threading.Tasks.Task<ICollection<TeamTalent>> GetTalentAsync (int? year = null);

        /// <summary>
        /// Team talent composite rankings
        /// </summary>
        /// <remarks>
        /// Team talent composite
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamTalent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<TeamTalent>>> GetTalentAsyncWithHttpInfo (int? year = null);
        /// <summary>
        /// Team matchup history
        /// </summary>
        /// <remarks>
        /// Matchup history
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team1">First team</param>
        /// <param name="team2">Second team</param>
        /// <param name="minYear">Minimum year (optional)</param>
        /// <param name="maxYear">Maximum year (optional)</param>
        /// <returns>Task of TeamMatchup</returns>
        System.Threading.Tasks.Task<TeamMatchup> GetTeamMatchupAsync (string team1, string team2, int? minYear = null, int? maxYear = null);

        /// <summary>
        /// Team matchup history
        /// </summary>
        /// <remarks>
        /// Matchup history
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team1">First team</param>
        /// <param name="team2">Second team</param>
        /// <param name="minYear">Minimum year (optional)</param>
        /// <param name="maxYear">Maximum year (optional)</param>
        /// <returns>Task of ApiResponse (TeamMatchup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMatchup>> GetTeamMatchupAsyncWithHttpInfo (string team1, string team2, int? minYear = null, int? maxYear = null);
        /// <summary>
        /// Team information
        /// </summary>
        /// <remarks>
        /// Get team information
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <returns>Task of ICollection&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Team>> GetTeamsAsync (string conference = null);

        /// <summary>
        /// Team information
        /// </summary>
        /// <remarks>
        /// Get team information
        /// </remarks>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Team>>> GetTeamsAsyncWithHttpInfo (string conference = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private CFBSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = new CFBSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(CFBSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CFBSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CFBSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CFBSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CFBSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// FBS team list Information on major division teams
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>ICollection&lt;Team&gt;</returns>
        public ICollection<Team> GetFbsTeams (int? year = null)
        {
             ApiResponse<ICollection<Team>> localVarResponse = GetFbsTeamsWithHttpInfo(year);
             return localVarResponse.Data;
        }

        /// <summary>
        /// FBS team list Information on major division teams
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Team&gt;</returns>
        public ApiResponse< ICollection<Team> > GetFbsTeamsWithHttpInfo (int? year = null)
        {

            var localVarPath = "./teams/fbs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFbsTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        /// FBS team list Information on major division teams
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>Task of ICollection&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Team>> GetFbsTeamsAsync (int? year = null)
        {
             ApiResponse<ICollection<Team>> localVarResponse = await GetFbsTeamsAsyncWithHttpInfo(year);
             return localVarResponse.Data;

        }

        /// <summary>
        /// FBS team list Information on major division teams
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<Team>>> GetFbsTeamsAsyncWithHttpInfo (int? year = null)
        {

            var localVarPath = "./teams/fbs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFbsTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        /// Team rosters Roster data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Team name (optional)</param>
        /// <param name="year">Season year (optional)</param>
        /// <returns>ICollection&lt;Player&gt;</returns>
        public ICollection<Player> GetRoster (string team = null, int? year = null)
        {
             ApiResponse<ICollection<Player>> localVarResponse = GetRosterWithHttpInfo(team, year);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Team rosters Roster data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Team name (optional)</param>
        /// <param name="year">Season year (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Player&gt;</returns>
        public ApiResponse< ICollection<Player> > GetRosterWithHttpInfo (string team = null, int? year = null)
        {

            var localVarPath = "./roster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Player>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Player>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Player>)));
        }

        /// <summary>
        /// Team rosters Roster data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Team name (optional)</param>
        /// <param name="year">Season year (optional)</param>
        /// <returns>Task of ICollection&lt;Player&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Player>> GetRosterAsync (string team = null, int? year = null)
        {
             ApiResponse<ICollection<Player>> localVarResponse = await GetRosterAsyncWithHttpInfo(team, year);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Team rosters Roster data
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team">Team name (optional)</param>
        /// <param name="year">Season year (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Player&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<Player>>> GetRosterAsyncWithHttpInfo (string team = null, int? year = null)
        {

            var localVarPath = "./roster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (team != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team", team)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Player>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Player>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Player>)));
        }

        /// <summary>
        /// Team talent composite rankings Team talent composite
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>ICollection&lt;TeamTalent&gt;</returns>
        public ICollection<TeamTalent> GetTalent (int? year = null)
        {
             ApiResponse<ICollection<TeamTalent>> localVarResponse = GetTalentWithHttpInfo(year);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Team talent composite rankings Team talent composite
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;TeamTalent&gt;</returns>
        public ApiResponse< ICollection<TeamTalent> > GetTalentWithHttpInfo (int? year = null)
        {

            var localVarPath = "./talent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTalent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamTalent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamTalent>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamTalent>)));
        }

        /// <summary>
        /// Team talent composite rankings Team talent composite
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>Task of ICollection&lt;TeamTalent&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<TeamTalent>> GetTalentAsync (int? year = null)
        {
             ApiResponse<ICollection<TeamTalent>> localVarResponse = await GetTalentAsyncWithHttpInfo(year);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Team talent composite rankings Team talent composite
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year">Year filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;TeamTalent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<TeamTalent>>> GetTalentAsyncWithHttpInfo (int? year = null)
        {

            var localVarPath = "./talent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTalent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<TeamTalent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<TeamTalent>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamTalent>)));
        }

        /// <summary>
        /// Team matchup history Matchup history
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team1">First team</param>
        /// <param name="team2">Second team</param>
        /// <param name="minYear">Minimum year (optional)</param>
        /// <param name="maxYear">Maximum year (optional)</param>
        /// <returns>TeamMatchup</returns>
        public TeamMatchup GetTeamMatchup (string team1, string team2, int? minYear = null, int? maxYear = null)
        {
             ApiResponse<TeamMatchup> localVarResponse = GetTeamMatchupWithHttpInfo(team1, team2, minYear, maxYear);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Team matchup history Matchup history
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team1">First team</param>
        /// <param name="team2">Second team</param>
        /// <param name="minYear">Minimum year (optional)</param>
        /// <param name="maxYear">Maximum year (optional)</param>
        /// <returns>ApiResponse of TeamMatchup</returns>
        public ApiResponse< TeamMatchup > GetTeamMatchupWithHttpInfo (string team1, string team2, int? minYear = null, int? maxYear = null)
        {
            // verify the required parameter 'team1' is set
            if (team1 == null)
                throw new ApiException(400, "Missing required parameter 'team1' when calling TeamsApi->GetTeamMatchup");
            // verify the required parameter 'team2' is set
            if (team2 == null)
                throw new ApiException(400, "Missing required parameter 'team2' when calling TeamsApi->GetTeamMatchup");

            var localVarPath = "./teams/matchup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (team1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team1", team1)); // query parameter
            if (team2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team2", team2)); // query parameter
            if (minYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minYear", minYear)); // query parameter
            if (maxYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxYear", maxYear)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMatchup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMatchup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TeamMatchup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMatchup)));
        }

        /// <summary>
        /// Team matchup history Matchup history
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team1">First team</param>
        /// <param name="team2">Second team</param>
        /// <param name="minYear">Minimum year (optional)</param>
        /// <param name="maxYear">Maximum year (optional)</param>
        /// <returns>Task of TeamMatchup</returns>
        public async System.Threading.Tasks.Task<TeamMatchup> GetTeamMatchupAsync (string team1, string team2, int? minYear = null, int? maxYear = null)
        {
             ApiResponse<TeamMatchup> localVarResponse = await GetTeamMatchupAsyncWithHttpInfo(team1, team2, minYear, maxYear);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Team matchup history Matchup history
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team1">First team</param>
        /// <param name="team2">Second team</param>
        /// <param name="minYear">Minimum year (optional)</param>
        /// <param name="maxYear">Maximum year (optional)</param>
        /// <returns>Task of ApiResponse (TeamMatchup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMatchup>> GetTeamMatchupAsyncWithHttpInfo (string team1, string team2, int? minYear = null, int? maxYear = null)
        {
            // verify the required parameter 'team1' is set
            if (team1 == null)
                throw new ApiException(400, "Missing required parameter 'team1' when calling TeamsApi->GetTeamMatchup");
            // verify the required parameter 'team2' is set
            if (team2 == null)
                throw new ApiException(400, "Missing required parameter 'team2' when calling TeamsApi->GetTeamMatchup");

            var localVarPath = "./teams/matchup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (team1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team1", team1)); // query parameter
            if (team2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team2", team2)); // query parameter
            if (minYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minYear", minYear)); // query parameter
            if (maxYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxYear", maxYear)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeamMatchup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMatchup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (TeamMatchup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMatchup)));
        }

        /// <summary>
        /// Team information Get team information
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <returns>ICollection&lt;Team&gt;</returns>
        public ICollection<Team> GetTeams (string conference = null)
        {
             ApiResponse<ICollection<Team>> localVarResponse = GetTeamsWithHttpInfo(conference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Team information Get team information
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;Team&gt;</returns>
        public ApiResponse< ICollection<Team> > GetTeamsWithHttpInfo (string conference = null)
        {

            var localVarPath = "./teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

        /// <summary>
        /// Team information Get team information
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <returns>Task of ICollection&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Team>> GetTeamsAsync (string conference = null)
        {
             ApiResponse<ICollection<Team>> localVarResponse = await GetTeamsAsyncWithHttpInfo(conference);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Team information Get team information
        /// </summary>
        /// <exception cref="CFBSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conference">Conference abbreviation filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<Team>>> GetTeamsAsyncWithHttpInfo (string conference = null)
        {

            var localVarPath = "./teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (conference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "conference", conference)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<Team>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
        }

    }
}
